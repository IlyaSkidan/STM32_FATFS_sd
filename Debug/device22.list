
device22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800885c  0800885c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008864  08008864  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800886c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000088  080088f4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080088f4  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e23b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f7  00000000  00000000  0002e2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d14  00000000  00000000  00031c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011273  00000000  00000000  0004992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894cd  00000000  00000000  0005ab9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e406c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  000e40bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008008 	.word	0x08008008

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008008 	.word	0x08008008

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <UART_Print>:
static void MX_USART1_UART_Init(void);

static void SD_Card_Test(void);

static void UART_Print(char* str)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fb19 	bl	80001e0 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	2364      	movs	r3, #100	; 0x64
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <UART_Print+0x24>)
 8000bb8:	f002 f881 	bl	8002cbe <HAL_UART_Transmit>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000fc 	.word	0x200000fc

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fcaa 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 fa26 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 fae2 	bl	800119c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bd8:	f000 fa80 	bl	80010dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000bdc:	f000 fab4 	bl	8001148 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000be0:	f002 fbe2 	bl	80033a8 <MX_FATFS_Init>

  SD_Card_Test();
 8000be4:	f000 f802 	bl	8000bec <SD_Card_Test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <main+0x20>
	...

08000bec <SD_Card_Test>:
  }
  /* USER CODE END 3 */
}

static void SD_Card_Test(void)
{
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, "", 1);
 8000bf6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000bfa:	f103 0310 	add.w	r3, r3, #16
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	2201      	movs	r2, #1
 8000c02:	49b4      	ldr	r1, [pc, #720]	; (8000ed4 <SD_Card_Test+0x2e8>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fadf 	bl	80061c8 <f_mount>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000c10:	f102 020f 	add.w	r2, r2, #15
 8000c14:	7013      	strb	r3, [r2, #0]
	if (FR_Status != FR_OK)
 8000c16:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000c1a:	f103 030f 	add.w	r3, r3, #15
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00d      	beq.n	8000c40 <SD_Card_Test+0x54>
	{
	  sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c24:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000c28:	f103 030f 	add.w	r3, r3, #15
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	49a9      	ldr	r1, [pc, #676]	; (8000ed8 <SD_Card_Test+0x2ec>)
 8000c32:	48aa      	ldr	r0, [pc, #680]	; (8000edc <SD_Card_Test+0x2f0>)
 8000c34:	f006 fd7a 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000c38:	48a8      	ldr	r0, [pc, #672]	; (8000edc <SD_Card_Test+0x2f0>)
 8000c3a:	f7ff ffb1 	bl	8000ba0 <UART_Print>
	  break;
 8000c3e:	e1b4      	b.n	8000faa <SD_Card_Test+0x3be>
	}
	sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000c40:	49a7      	ldr	r1, [pc, #668]	; (8000ee0 <SD_Card_Test+0x2f4>)
 8000c42:	48a6      	ldr	r0, [pc, #664]	; (8000edc <SD_Card_Test+0x2f0>)
 8000c44:	f006 fd72 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000c48:	48a4      	ldr	r0, [pc, #656]	; (8000edc <SD_Card_Test+0x2f0>)
 8000c4a:	f7ff ffa9 	bl	8000ba0 <UART_Print>
	//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
	f_getfree("", &FreeClusters, &FS_Ptr);
 8000c4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000c52:	3a38      	subs	r2, #56	; 0x38
 8000c54:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c58:	3b04      	subs	r3, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	489d      	ldr	r0, [pc, #628]	; (8000ed4 <SD_Card_Test+0x2e8>)
 8000c5e:	f006 fa84 	bl	800716a <f_getfree>
	TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000c62:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000c66:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	3b02      	subs	r3, #2
 8000c6e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000c72:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8000c76:	8952      	ldrh	r2, [r2, #10]
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd73 	bl	8000768 <__aeabi_ui2d>
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	4b97      	ldr	r3, [pc, #604]	; (8000ee4 <SD_Card_Test+0x2f8>)
 8000c88:	f7ff fb02 	bl	8000290 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff fde2 	bl	800085c <__aeabi_d2uiz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000c9e:	f102 0208 	add.w	r2, r2, #8
 8000ca2:	6013      	str	r3, [r2, #0]
	FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000ca4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ca8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000cac:	895b      	ldrh	r3, [r3, #10]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000cb4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000cb8:	fb02 f303 	mul.w	r3, r2, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd53 	bl	8000768 <__aeabi_ui2d>
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b87      	ldr	r3, [pc, #540]	; (8000ee4 <SD_Card_Test+0x2f8>)
 8000cc8:	f7ff fae2 	bl	8000290 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fdc2 	bl	800085c <__aeabi_d2uiz>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000cde:	f102 0204 	add.w	r2, r2, #4
 8000ce2:	6013      	str	r3, [r2, #0]
	sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000ce4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000ce8:	f103 0308 	add.w	r3, r3, #8
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	497e      	ldr	r1, [pc, #504]	; (8000ee8 <SD_Card_Test+0x2fc>)
 8000cf0:	487a      	ldr	r0, [pc, #488]	; (8000edc <SD_Card_Test+0x2f0>)
 8000cf2:	f006 fd1b 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000cf6:	4879      	ldr	r0, [pc, #484]	; (8000edc <SD_Card_Test+0x2f0>)
 8000cf8:	f7ff ff52 	bl	8000ba0 <UART_Print>
	sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000cfc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000d00:	f103 0304 	add.w	r3, r3, #4
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4979      	ldr	r1, [pc, #484]	; (8000eec <SD_Card_Test+0x300>)
 8000d08:	4874      	ldr	r0, [pc, #464]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d0a:	f006 fd0f 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000d0e:	4873      	ldr	r0, [pc, #460]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d10:	f7ff ff46 	bl	8000ba0 <UART_Print>
	//------------------[ Open A Text File For Write & Write Data ]--------------------
	//Open the file
	FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d18:	3b34      	subs	r3, #52	; 0x34
 8000d1a:	220b      	movs	r2, #11
 8000d1c:	4974      	ldr	r1, [pc, #464]	; (8000ef0 <SD_Card_Test+0x304>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fa98 	bl	8006254 <f_open>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000d2a:	f102 020f 	add.w	r2, r2, #15
 8000d2e:	7013      	strb	r3, [r2, #0]
	if(FR_Status != FR_OK)
 8000d30:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000d34:	f103 030f 	add.w	r3, r3, #15
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00d      	beq.n	8000d5a <SD_Card_Test+0x16e>
	{
	  sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000d3e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000d42:	f103 030f 	add.w	r3, r3, #15
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	496a      	ldr	r1, [pc, #424]	; (8000ef4 <SD_Card_Test+0x308>)
 8000d4c:	4863      	ldr	r0, [pc, #396]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d4e:	f006 fced 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000d52:	4862      	ldr	r0, [pc, #392]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d54:	f7ff ff24 	bl	8000ba0 <UART_Print>
	  break;
 8000d58:	e127      	b.n	8000faa <SD_Card_Test+0x3be>
	}
	sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000d5a:	4967      	ldr	r1, [pc, #412]	; (8000ef8 <SD_Card_Test+0x30c>)
 8000d5c:	485f      	ldr	r0, [pc, #380]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d5e:	f006 fce5 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000d62:	485e      	ldr	r0, [pc, #376]	; (8000edc <SD_Card_Test+0x2f0>)
 8000d64:	f7ff ff1c 	bl	8000ba0 <UART_Print>
	// (1) Write Data To The Text File [ Using f_puts() Function ]
	f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6c:	3b34      	subs	r3, #52	; 0x34
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4862      	ldr	r0, [pc, #392]	; (8000efc <SD_Card_Test+0x310>)
 8000d72:	f006 fb63 	bl	800743c <f_puts>
	// (2) Write Data To The Text File [ Using f_write() Function ]
	strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	3b0c      	subs	r3, #12
 8000d7c:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <SD_Card_Test+0x314>)
 8000d7e:	461c      	mov	r4, r3
 8000d80:	4615      	mov	r5, r2
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d92:	c403      	stmia	r4!, {r0, r1}
 8000d94:	7022      	strb	r2, [r4, #0]
	f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	3b0c      	subs	r3, #12
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fa1f 	bl	80001e0 <strlen>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000da8:	f107 0110 	add.w	r1, r7, #16
 8000dac:	390c      	subs	r1, #12
 8000dae:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000db2:	3834      	subs	r0, #52	; 0x34
 8000db4:	f005 fd79 	bl	80068aa <f_write>
	// Close The File
	f_close(&Fil);
 8000db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dbc:	3b34      	subs	r3, #52	; 0x34
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 ff85 	bl	8006cce <f_close>
	//------------------[ Open A Text File For Read & Read Its Data ]--------------------
	// Open The File
	FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 8000dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dc8:	3b34      	subs	r3, #52	; 0x34
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4948      	ldr	r1, [pc, #288]	; (8000ef0 <SD_Card_Test+0x304>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f005 fa40 	bl	8006254 <f_open>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000dda:	f102 020f 	add.w	r2, r2, #15
 8000dde:	7013      	strb	r3, [r2, #0]
	if(FR_Status != FR_OK)
 8000de0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000de4:	f103 030f 	add.w	r3, r3, #15
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <SD_Card_Test+0x212>
	{
	  sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8000dee:	4945      	ldr	r1, [pc, #276]	; (8000f04 <SD_Card_Test+0x318>)
 8000df0:	483a      	ldr	r0, [pc, #232]	; (8000edc <SD_Card_Test+0x2f0>)
 8000df2:	f006 fc9b 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000df6:	4839      	ldr	r0, [pc, #228]	; (8000edc <SD_Card_Test+0x2f0>)
 8000df8:	f7ff fed2 	bl	8000ba0 <UART_Print>
	  break;
 8000dfc:	e0d5      	b.n	8000faa <SD_Card_Test+0x3be>
	}
	// (1) Read The Text File's Data [ Using f_gets() Function ]
	f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000dfe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e02:	3a34      	subs	r2, #52	; 0x34
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	3b0c      	subs	r3, #12
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 fa61 	bl	80072d4 <f_gets>
	sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	3b0c      	subs	r3, #12
 8000e18:	461a      	mov	r2, r3
 8000e1a:	493b      	ldr	r1, [pc, #236]	; (8000f08 <SD_Card_Test+0x31c>)
 8000e1c:	482f      	ldr	r0, [pc, #188]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e1e:	f006 fc85 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000e22:	482e      	ldr	r0, [pc, #184]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e24:	f7ff febc 	bl	8000ba0 <UART_Print>
	// (2) Read The Text File's Data [ Using f_read() Function ]
	f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000e28:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e2c:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000e30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e34:	3b3c      	subs	r3, #60	; 0x3c
 8000e36:	f107 0110 	add.w	r1, r7, #16
 8000e3a:	390c      	subs	r1, #12
 8000e3c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000e40:	3834      	subs	r0, #52	; 0x34
 8000e42:	f005 fbd3 	bl	80065ec <f_read>
	sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	3b0c      	subs	r3, #12
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	492f      	ldr	r1, [pc, #188]	; (8000f0c <SD_Card_Test+0x320>)
 8000e50:	4822      	ldr	r0, [pc, #136]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e52:	f006 fc6b 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000e56:	4821      	ldr	r0, [pc, #132]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e58:	f7ff fea2 	bl	8000ba0 <UART_Print>
	// Close The File
	f_close(&Fil);
 8000e5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e60:	3b34      	subs	r3, #52	; 0x34
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 ff33 	bl	8006cce <f_close>
	sprintf(TxBuffer, "File Closed! \r\n\n");
 8000e68:	4929      	ldr	r1, [pc, #164]	; (8000f10 <SD_Card_Test+0x324>)
 8000e6a:	481c      	ldr	r0, [pc, #112]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e6c:	f006 fc5e 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <SD_Card_Test+0x2f0>)
 8000e72:	f7ff fe95 	bl	8000ba0 <UART_Print>
	//------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
	// (1) Open The Existing File For Write (Update)
	FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e7a:	3b34      	subs	r3, #52	; 0x34
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	491c      	ldr	r1, [pc, #112]	; (8000ef0 <SD_Card_Test+0x304>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f005 f9e7 	bl	8006254 <f_open>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000e8c:	f102 020f 	add.w	r2, r2, #15
 8000e90:	7013      	strb	r3, [r2, #0]
	FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000e92:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e96:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e9e:	3b34      	subs	r3, #52	; 0x34
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 ff3d 	bl	8006d22 <f_lseek>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000eae:	f102 020f 	add.w	r2, r2, #15
 8000eb2:	7013      	strb	r3, [r2, #0]
	if(FR_Status != FR_OK)
 8000eb4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000eb8:	f103 030f 	add.w	r3, r3, #15
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d02a      	beq.n	8000f18 <SD_Card_Test+0x32c>
	{
	  sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 8000ec2:	4914      	ldr	r1, [pc, #80]	; (8000f14 <SD_Card_Test+0x328>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <SD_Card_Test+0x2f0>)
 8000ec6:	f006 fc31 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <SD_Card_Test+0x2f0>)
 8000ecc:	f7ff fe68 	bl	8000ba0 <UART_Print>
	  break;
 8000ed0:	e06b      	b.n	8000faa <SD_Card_Test+0x3be>
 8000ed2:	bf00      	nop
 8000ed4:	08008020 	.word	0x08008020
 8000ed8:	08008024 	.word	0x08008024
 8000edc:	20000140 	.word	0x20000140
 8000ee0:	08008058 	.word	0x08008058
 8000ee4:	3fe00000 	.word	0x3fe00000
 8000ee8:	0800807c 	.word	0x0800807c
 8000eec:	0800809c 	.word	0x0800809c
 8000ef0:	080080c0 	.word	0x080080c0
 8000ef4:	080080d4 	.word	0x080080d4
 8000ef8:	08008118 	.word	0x08008118
 8000efc:	08008158 	.word	0x08008158
 8000f00:	08008190 	.word	0x08008190
 8000f04:	080081cc 	.word	0x080081cc
 8000f08:	08008208 	.word	0x08008208
 8000f0c:	08008240 	.word	0x08008240
 8000f10:	08008278 	.word	0x08008278
 8000f14:	0800828c 	.word	0x0800828c
	}
	// (2) Write New Line of Text Data To The File
	FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 8000f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f1c:	3b34      	subs	r3, #52	; 0x34
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4838      	ldr	r0, [pc, #224]	; (8001004 <SD_Card_Test+0x418>)
 8000f22:	f006 fa8b 	bl	800743c <f_puts>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000f2c:	f102 020f 	add.w	r2, r2, #15
 8000f30:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8000f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f36:	3b34      	subs	r3, #52	; 0x34
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fec8 	bl	8006cce <f_close>
	memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	3b0c      	subs	r3, #12
 8000f44:	22c8      	movs	r2, #200	; 0xc8
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fbe7 	bl	800771c <memset>
	// (3) Read The Contents of The Text File After The Update
	FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 8000f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f52:	3b34      	subs	r3, #52	; 0x34
 8000f54:	2201      	movs	r2, #1
 8000f56:	492c      	ldr	r1, [pc, #176]	; (8001008 <SD_Card_Test+0x41c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 f97b 	bl	8006254 <f_open>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000f64:	f102 020f 	add.w	r2, r2, #15
 8000f68:	7013      	strb	r3, [r2, #0]
	f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000f6a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f6e:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000f72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f76:	3b3c      	subs	r3, #60	; 0x3c
 8000f78:	f107 0110 	add.w	r1, r7, #16
 8000f7c:	390c      	subs	r1, #12
 8000f7e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000f82:	3834      	subs	r0, #52	; 0x34
 8000f84:	f005 fb32 	bl	80065ec <f_read>
	sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	3b0c      	subs	r3, #12
 8000f8e:	461a      	mov	r2, r3
 8000f90:	491e      	ldr	r1, [pc, #120]	; (800100c <SD_Card_Test+0x420>)
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <SD_Card_Test+0x424>)
 8000f94:	f006 fbca 	bl	800772c <siprintf>
	UART_Print(TxBuffer);
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <SD_Card_Test+0x424>)
 8000f9a:	f7ff fe01 	bl	8000ba0 <UART_Print>
	f_close(&Fil);
 8000f9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fa2:	3b34      	subs	r3, #52	; 0x34
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fe92 	bl	8006cce <f_close>
		UART_Print(TxBuffer);
	}
	*/
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	4919      	ldr	r1, [pc, #100]	; (8001014 <SD_Card_Test+0x428>)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f005 f90a 	bl	80061c8 <f_mount>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8000fba:	f102 020f 	add.w	r2, r2, #15
 8000fbe:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8000fc0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000fc4:	f103 030f 	add.w	r3, r3, #15
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00d      	beq.n	8000fea <SD_Card_Test+0x3fe>
  {
	  sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000fce:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8000fd2:	f103 030f 	add.w	r3, r3, #15
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	490f      	ldr	r1, [pc, #60]	; (8001018 <SD_Card_Test+0x42c>)
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <SD_Card_Test+0x424>)
 8000fde:	f006 fba5 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <SD_Card_Test+0x424>)
 8000fe4:	f7ff fddc 	bl	8000ba0 <UART_Print>
  } else{
	  sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
	  UART_Print(TxBuffer);
  }
}
 8000fe8:	e006      	b.n	8000ff8 <SD_Card_Test+0x40c>
	  sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <SD_Card_Test+0x430>)
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <SD_Card_Test+0x424>)
 8000fee:	f006 fb9d 	bl	800772c <siprintf>
	  UART_Print(TxBuffer);
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <SD_Card_Test+0x424>)
 8000ff4:	f7ff fdd4 	bl	8000ba0 <UART_Print>
}
 8000ff8:	bf00      	nop
 8000ffa:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bdb0      	pop	{r4, r5, r7, pc}
 8001004:	080082cc 	.word	0x080082cc
 8001008:	080080c0 	.word	0x080080c0
 800100c:	080082f8 	.word	0x080082f8
 8001010:	20000140 	.word	0x20000140
 8001014:	08008020 	.word	0x08008020
 8001018:	0800832c 	.word	0x0800832c
 800101c:	08008364 	.word	0x08008364

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	; 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2230      	movs	r2, #48	; 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fb74 	bl	800771c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <SystemClock_Config+0xb4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <SystemClock_Config+0xb4>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <SystemClock_Config+0xb4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <SystemClock_Config+0xb8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <SystemClock_Config+0xb8>)
 800106a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <SystemClock_Config+0xb8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2310      	movs	r3, #16
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fd3d 	bl	8001b10 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800109c:	f000 f8d0 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 ffa0 	bl	8002000 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010c6:	f000 f8bb 	bl	8001240 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	; 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_SPI2_Init+0x64>)
 80010e2:	4a18      	ldr	r2, [pc, #96]	; (8001144 <MX_SPI2_Init+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_SPI2_Init+0x64>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_SPI2_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_SPI2_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_SPI2_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_SPI2_Init+0x64>)
 8001108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_SPI2_Init+0x64>)
 8001110:	2210      	movs	r2, #16
 8001112:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_SPI2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_SPI2_Init+0x64>)
 8001128:	220a      	movs	r2, #10
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_SPI2_Init+0x64>)
 800112e:	f001 f947 	bl	80023c0 <HAL_SPI_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001138:	f000 f882 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000a4 	.word	0x200000a4
 8001144:	40003800 	.word	0x40003800

08001148 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_USART1_UART_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USART1_UART_Init+0x4c>)
 8001180:	f001 fd50 	bl	8002c24 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800118a:	f000 f859 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000fc 	.word	0x200000fc
 8001198:	40011000 	.word	0x40011000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_GPIO_Init+0x9c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <MX_GPIO_Init+0xa0>)
 800120e:	f000 fc65 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_GPIO_Init+0xa0>)
 800122c:	f000 fad2 	bl	80017d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_SPI_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80012f6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001308:	2305      	movs	r3, #5
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 8001314:	f000 fa5e 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40003800 	.word	0x40003800
 8001324:	40023800 	.word	0x40023800
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12c      	bne.n	80013a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001386:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001398:	2307      	movs	r3, #7
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0x8c>)
 80013a4:	f000 fa16 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <SysTick_Handler+0x34>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <SysTick_Handler+0x18>
	    Timer1--;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <SysTick_Handler+0x34>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <SysTick_Handler+0x34>)
 800141a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <SysTick_Handler+0x38>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <SysTick_Handler+0x2c>
	    Timer2--;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Handler+0x38>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SysTick_Handler+0x38>)
 800142e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f8ca 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000024c 	.word	0x2000024c
 800143c:	2000024e 	.word	0x2000024e

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f006 f92a 	bl	80076c8 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20020000 	.word	0x20020000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	2000023c 	.word	0x2000023c
 80014a8:	20000498 	.word	0x20000498

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ffd7 	bl	80014ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f006 f8e9 	bl	80076d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fb61 	bl	8000bc8 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001514:	0800886c 	.word	0x0800886c
  ldr r2, =_sbss
 8001518:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800151c:	20000498 	.word	0x20000498

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f90d 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	200f      	movs	r0, #15
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fe78 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f917 	bl	80017ba <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f8ed 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000240 	.word	0x20000240

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000240 	.word	0x20000240

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff47 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff5c 	bl	8001650 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb0 	bl	8001728 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e159      	b.n	8001aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8148 	bne.w	8001a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x202>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1fe>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1f6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1f2>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f aea2 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e267      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e242      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a68      	ldr	r2, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fd12 	bl	80015f0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fd0e 	bl	80015f0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e207      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcfe 	bl	80015f0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fcfa 	bl	80015f0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1f3      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1c7      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fcb3 	bl	80015f0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fcaf 	bl	80015f0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1a8      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4925      	ldr	r1, [pc, #148]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc92 	bl	80015f0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc8e 	bl	80015f0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e187      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d036      	beq.n	8001d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x248>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fc72 	bl	80015f0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc6e 	bl	80015f0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e167      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
 8001d2e:	e01b      	b.n	8001d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x248>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fc5b 	bl	80015f0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e00e      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc57 	bl	80015f0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d907      	bls.n	8001d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e150      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470000 	.word	0x42470000
 8001d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ea      	bne.n	8001d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8097 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b81      	ldr	r3, [pc, #516]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	4b7d      	ldr	r3, [pc, #500]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a7c      	ldr	r2, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b77      	ldr	r3, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a73      	ldr	r2, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fc17 	bl	80015f0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff fc13 	bl	80015f0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e10c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2ea>
 8001dec:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0x324>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x30c>
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a5e      	ldr	r2, [pc, #376]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a5b      	ldr	r2, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0x324>
 8001e1c:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d015      	beq.n	8001e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fbd8 	bl	80015f0 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff fbd4 	bl	80015f0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0cb      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ee      	beq.n	8001e44 <HAL_RCC_OscConfig+0x334>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fbc2 	bl	80015f0 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff fbbe 	bl	80015f0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0b5      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ee      	bne.n	8001e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a1 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d05c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d141      	bne.n	8001f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb92 	bl	80015f0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff fb8e 	bl	80015f0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e087      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	491b      	ldr	r1, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb67 	bl	80015f0 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb63 	bl	80015f0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e05c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x416>
 8001f44:	e054      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fb50 	bl	80015f0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff fb4c 	bl	80015f0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e045      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x444>
 8001f72:	e03d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e038      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40007000 	.word	0x40007000
 8001f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x4ec>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d028      	beq.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d121      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0cc      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d90c      	bls.n	800203c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d044      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d119      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e067      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff fa7e 	bl	80015f0 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7ff fa7a 	bl	80015f0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e04f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20c      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4602      	mov	r2, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f9de 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080083d0 	.word	0x080083d0
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d0:	b090      	sub	sp, #64	; 0x40
 80021d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d00d      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x40>
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	f200 80a1 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x16c>
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x34>
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fe:	e09b      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_GetSysClockFreq+0x184>)
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002204:	e09b      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800220a:	e098      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d028      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	2200      	movs	r2, #0
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	627a      	str	r2, [r7, #36]	; 0x24
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002234:	2100      	movs	r1, #0
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002238:	fb03 f201 	mul.w	r2, r3, r1
 800223c:	2300      	movs	r3, #0
 800223e:	fb00 f303 	mul.w	r3, r0, r3
 8002242:	4413      	add	r3, r2
 8002244:	4a43      	ldr	r2, [pc, #268]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002246:	fba0 1202 	umull	r1, r2, r0, r2
 800224a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800224c:	460a      	mov	r2, r1
 800224e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002252:	4413      	add	r3, r2
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	2200      	movs	r2, #0
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	61fa      	str	r2, [r7, #28]
 800225e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002266:	f7fe fb19 	bl	800089c <__aeabi_uldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4613      	mov	r3, r2
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	e053      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	2200      	movs	r2, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	617a      	str	r2, [r7, #20]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002286:	f04f 0b00 	mov.w	fp, #0
 800228a:	4652      	mov	r2, sl
 800228c:	465b      	mov	r3, fp
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229c:	0150      	lsls	r0, r2, #5
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	ebb2 080a 	subs.w	r8, r2, sl
 80022a6:	eb63 090b 	sbc.w	r9, r3, fp
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022be:	ebb2 0408 	subs.w	r4, r2, r8
 80022c2:	eb63 0509 	sbc.w	r5, r3, r9
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	00eb      	lsls	r3, r5, #3
 80022d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d4:	00e2      	lsls	r2, r4, #3
 80022d6:	4614      	mov	r4, r2
 80022d8:	461d      	mov	r5, r3
 80022da:	eb14 030a 	adds.w	r3, r4, sl
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	eb45 030b 	adc.w	r3, r5, fp
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022f2:	4629      	mov	r1, r5
 80022f4:	028b      	lsls	r3, r1, #10
 80022f6:	4621      	mov	r1, r4
 80022f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022fc:	4621      	mov	r1, r4
 80022fe:	028a      	lsls	r2, r1, #10
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	2200      	movs	r2, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002310:	f7fe fac4 	bl	800089c <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800232c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x184>)
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002340:	4618      	mov	r0, r3
 8002342:	3740      	adds	r7, #64	; 0x40
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	017d7840 	.word	0x017d7840

08002358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	080083e0 	.word	0x080083e0

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff ffdc 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0b5b      	lsrs	r3, r3, #13
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	080083e0 	.word	0x080083e0

080023c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07b      	b.n	80024ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e2:	d009      	beq.n	80023f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
 80023ea:	e005      	b.n	80023f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe ff42 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	ea42 0103 	orr.w	r1, r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0104 	and.w	r1, r3, #4
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f003 0210 	and.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b088      	sub	sp, #32
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_SPI_Transmit+0x22>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e126      	b.n	8002742 <HAL_SPI_Transmit+0x270>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024fc:	f7ff f878 	bl	80015f0 <HAL_GetTick>
 8002500:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d002      	beq.n	8002518 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002516:	e10b      	b.n	8002730 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_SPI_Transmit+0x52>
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002528:	e102      	b.n	8002730 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2203      	movs	r2, #3
 800252e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002570:	d10f      	bne.n	8002592 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d007      	beq.n	80025b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b8:	d14b      	bne.n	8002652 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_SPI_Transmit+0xf6>
 80025c2:	8afb      	ldrh	r3, [r7, #22]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d13e      	bne.n	8002646 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ec:	e02b      	b.n	8002646 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d112      	bne.n	8002622 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	1c9a      	adds	r2, r3, #2
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002620:	e011      	b.n	8002646 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002622:	f7fe ffe5 	bl	80015f0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d803      	bhi.n	800263a <HAL_SPI_Transmit+0x168>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d102      	bne.n	8002640 <HAL_SPI_Transmit+0x16e>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002644:	e074      	b.n	8002730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ce      	bne.n	80025ee <HAL_SPI_Transmit+0x11c>
 8002650:	e04c      	b.n	80026ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Transmit+0x18e>
 800265a:	8afb      	ldrh	r3, [r7, #22]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d140      	bne.n	80026e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002686:	e02c      	b.n	80026e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d113      	bne.n	80026be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80026bc:	e011      	b.n	80026e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026be:	f7fe ff97 	bl	80015f0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d803      	bhi.n	80026d6 <HAL_SPI_Transmit+0x204>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d102      	bne.n	80026dc <HAL_SPI_Transmit+0x20a>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026e0:	e026      	b.n	8002730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1cd      	bne.n	8002688 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fa55 	bl	8002ba0 <SPI_EndRxTxTransaction>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	77fb      	strb	r3, [r7, #31]
 800272c:	e000      	b.n	8002730 <HAL_SPI_Transmit+0x25e>
  }

error:
 800272e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002740:	7ffb      	ldrb	r3, [r7, #31]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08c      	sub	sp, #48	; 0x30
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x26>
 800276c:	2302      	movs	r3, #2
 800276e:	e18a      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x33c>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002778:	f7fe ff3a 	bl	80015f0 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00f      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a0:	d107      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
 80027aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b8:	e15b      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d2:	e14e      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d003      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2205      	movs	r2, #5
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d007      	beq.n	800283c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d178      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x10a>
 800284e:	8b7b      	ldrh	r3, [r7, #26]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d166      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002878:	e053      	b.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11b      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d113      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d014      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002902:	f7fe fe75 	bl	80015f0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	429a      	cmp	r2, r3
 8002910:	d807      	bhi.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d003      	beq.n	8002922 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002920:	e0a7      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1a6      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1a1      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 8002936:	e07c      	b.n	8002a32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x1fc>
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d16b      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	e057      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d11c      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d114      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2ae>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029f8:	f7fe fdfa 	bl	80015f0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x2c6>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x2cc>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a1c:	e029      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1a2      	bne.n	800296e <HAL_SPI_TransmitReceive+0x224>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d19d      	bne.n	800296e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f8b2 	bl	8002ba0 <SPI_EndRxTxTransaction>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a4e:	e010      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	e000      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa0:	f7fe fda6 	bl	80015f0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab0:	f7fe fd9e 	bl	80015f0 <HAL_GetTick>
 8002ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	0d1b      	lsrs	r3, r3, #20
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	e054      	b.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d050      	beq.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad0:	f7fe fd8e 	bl	80015f0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d902      	bls.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d13d      	bne.n	8002b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afe:	d111      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	d004      	beq.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d107      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d10f      	bne.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e017      	b.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d19b      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <SPI_EndRxTxTransaction+0x7c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <SPI_EndRxTxTransaction+0x80>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0d5b      	lsrs	r3, r3, #21
 8002bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bca:	d112      	bne.n	8002bf2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff ff5a 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d0f2      	beq.n	8002bf2 <SPI_EndRxTxTransaction+0x52>
 8002c0c:	e000      	b.n	8002c10 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c0e:	bf00      	nop
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	165e9f81 	.word	0x165e9f81

08002c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e03f      	b.n	8002cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fb6e 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	; 0x24
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f929 	bl	8002ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d17c      	bne.n	8002dd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_UART_Transmit+0x2c>
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e075      	b.n	8002dda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Transmit+0x3e>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e06e      	b.n	8002dda <HAL_UART_Transmit+0x11c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d12:	f7fe fc6d 	bl	80015f0 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	d108      	bne.n	8002d40 <HAL_UART_Transmit+0x82>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e003      	b.n	8002d48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d50:	e02a      	b.n	8002da8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f840 	bl	8002de2 <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e036      	b.n	8002dda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3302      	adds	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	e007      	b.n	8002d9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1cf      	bne.n	8002d52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f810 	bl	8002de2 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e006      	b.n	8002dda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b090      	sub	sp, #64	; 0x40
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	e050      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d04c      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e02:	f7fe fbf5 	bl	80015f0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d241      	bcs.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	330c      	adds	r3, #12
 8002e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e32:	637a      	str	r2, [r7, #52]	; 0x34
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	613b      	str	r3, [r7, #16]
   return(result);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e66:	623a      	str	r2, [r7, #32]
 8002e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	69f9      	ldr	r1, [r7, #28]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e5      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e00f      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d09f      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3740      	adds	r7, #64	; 0x40
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b0c0      	sub	sp, #256	; 0x100
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	ea40 0301 	orr.w	r3, r0, r1
 8002ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f18:	f021 010c 	bic.w	r1, r1, #12
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f26:	430b      	orrs	r3, r1
 8002f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	6999      	ldr	r1, [r3, #24]
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	ea40 0301 	orr.w	r3, r0, r1
 8002f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b8f      	ldr	r3, [pc, #572]	; (800318c <UART_SetConfig+0x2cc>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d005      	beq.n	8002f60 <UART_SetConfig+0xa0>
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <UART_SetConfig+0x2d0>)
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d104      	bne.n	8002f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff fa1a 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 8002f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f68:	e003      	b.n	8002f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f6a:	f7ff fa01 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8002f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	f040 810c 	bne.w	8003198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	1891      	adds	r1, r2, r2
 8002f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	eb12 0801 	adds.w	r8, r2, r1
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb43 0901 	adc.w	r9, r3, r1
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc2:	4690      	mov	r8, r2
 8002fc4:	4699      	mov	r9, r3
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	eb18 0303 	adds.w	r3, r8, r3
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	eb49 0303 	adc.w	r3, r9, r3
 8002fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fee:	460b      	mov	r3, r1
 8002ff0:	18db      	adds	r3, r3, r3
 8002ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	eb42 0303 	adc.w	r3, r2, r3
 8002ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8002ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003004:	f7fd fc4a 	bl	800089c <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <UART_SetConfig+0x2d4>)
 800300e:	fba3 2302 	umull	r2, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	011c      	lsls	r4, r3, #4
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003028:	4642      	mov	r2, r8
 800302a:	464b      	mov	r3, r9
 800302c:	1891      	adds	r1, r2, r2
 800302e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003030:	415b      	adcs	r3, r3
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003038:	4641      	mov	r1, r8
 800303a:	eb12 0a01 	adds.w	sl, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb43 0b01 	adc.w	fp, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003058:	4692      	mov	sl, r2
 800305a:	469b      	mov	fp, r3
 800305c:	4643      	mov	r3, r8
 800305e:	eb1a 0303 	adds.w	r3, sl, r3
 8003062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003066:	464b      	mov	r3, r9
 8003068:	eb4b 0303 	adc.w	r3, fp, r3
 800306c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800307c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003084:	460b      	mov	r3, r1
 8003086:	18db      	adds	r3, r3, r3
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
 800308a:	4613      	mov	r3, r2
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	647b      	str	r3, [r7, #68]	; 0x44
 8003092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800309a:	f7fd fbff 	bl	800089c <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <UART_SetConfig+0x2d4>)
 80030a6:	fba3 2301 	umull	r2, r3, r3, r1
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	1acb      	subs	r3, r1, r3
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <UART_SetConfig+0x2d4>)
 80030bc:	fba3 2302 	umull	r2, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c8:	441c      	add	r4, r3
 80030ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030e4:	415b      	adcs	r3, r3
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ec:	4641      	mov	r1, r8
 80030ee:	1851      	adds	r1, r2, r1
 80030f0:	6339      	str	r1, [r7, #48]	; 0x30
 80030f2:	4649      	mov	r1, r9
 80030f4:	414b      	adcs	r3, r1
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003104:	4659      	mov	r1, fp
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4651      	mov	r1, sl
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4642      	mov	r2, r8
 800311a:	189b      	adds	r3, r3, r2
 800311c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003120:	464b      	mov	r3, r9
 8003122:	460a      	mov	r2, r1
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800313c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003140:	460b      	mov	r3, r1
 8003142:	18db      	adds	r3, r3, r3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
 8003146:	4613      	mov	r3, r2
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003156:	f7fd fba1 	bl	800089c <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <UART_SetConfig+0x2d4>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <UART_SetConfig+0x2d4>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4422      	add	r2, r4
 8003186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003188:	e105      	b.n	8003396 <UART_SetConfig+0x4d6>
 800318a:	bf00      	nop
 800318c:	40011000 	.word	0x40011000
 8003190:	40011400 	.word	0x40011400
 8003194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	6239      	str	r1, [r7, #32]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ba:	4641      	mov	r1, r8
 80031bc:	1854      	adds	r4, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb43 0501 	adc.w	r5, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031e0:	464b      	mov	r3, r9
 80031e2:	eb45 0303 	adc.w	r3, r5, r3
 80031e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003206:	4629      	mov	r1, r5
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003210:	4621      	mov	r1, r4
 8003212:	008a      	lsls	r2, r1, #2
 8003214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003218:	f7fd fb40 	bl	800089c <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <UART_SetConfig+0x4e4>)
 8003222:	fba3 2302 	umull	r2, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	011c      	lsls	r4, r3, #4
 800322a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	61b9      	str	r1, [r7, #24]
 8003244:	415b      	adcs	r3, r3
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	4641      	mov	r1, r8
 800324e:	1851      	adds	r1, r2, r1
 8003250:	6139      	str	r1, [r7, #16]
 8003252:	4649      	mov	r1, r9
 8003254:	414b      	adcs	r3, r1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003264:	4659      	mov	r1, fp
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326e:	4651      	mov	r1, sl
 8003270:	00ca      	lsls	r2, r1, #3
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	4603      	mov	r3, r0
 8003278:	4642      	mov	r2, r8
 800327a:	189b      	adds	r3, r3, r2
 800327c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003280:	464b      	mov	r3, r9
 8003282:	460a      	mov	r2, r1
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	67bb      	str	r3, [r7, #120]	; 0x78
 8003296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032a4:	4649      	mov	r1, r9
 80032a6:	008b      	lsls	r3, r1, #2
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ae:	4641      	mov	r1, r8
 80032b0:	008a      	lsls	r2, r1, #2
 80032b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032b6:	f7fd faf1 	bl	800089c <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <UART_SetConfig+0x4e4>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2164      	movs	r1, #100	; 0x64
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <UART_SetConfig+0x4e4>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	441c      	add	r4, r3
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e4:	2200      	movs	r2, #0
 80032e6:	673b      	str	r3, [r7, #112]	; 0x70
 80032e8:	677a      	str	r2, [r7, #116]	; 0x74
 80032ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ee:	4642      	mov	r2, r8
 80032f0:	464b      	mov	r3, r9
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	415b      	adcs	r3, r3
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032fe:	4641      	mov	r1, r8
 8003300:	1851      	adds	r1, r2, r1
 8003302:	6039      	str	r1, [r7, #0]
 8003304:	4649      	mov	r1, r9
 8003306:	414b      	adcs	r3, r1
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003316:	4659      	mov	r1, fp
 8003318:	00cb      	lsls	r3, r1, #3
 800331a:	4651      	mov	r1, sl
 800331c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003320:	4651      	mov	r1, sl
 8003322:	00ca      	lsls	r2, r1, #3
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	4603      	mov	r3, r0
 800332a:	4642      	mov	r2, r8
 800332c:	189b      	adds	r3, r3, r2
 800332e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003330:	464b      	mov	r3, r9
 8003332:	460a      	mov	r2, r1
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	663b      	str	r3, [r7, #96]	; 0x60
 8003344:	667a      	str	r2, [r7, #100]	; 0x64
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003352:	4649      	mov	r1, r9
 8003354:	008b      	lsls	r3, r1, #2
 8003356:	4641      	mov	r1, r8
 8003358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800335c:	4641      	mov	r1, r8
 800335e:	008a      	lsls	r2, r1, #2
 8003360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003364:	f7fd fa9a 	bl	800089c <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <UART_SetConfig+0x4e4>)
 800336e:	fba3 1302 	umull	r1, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2164      	movs	r1, #100	; 0x64
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <UART_SetConfig+0x4e4>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4422      	add	r2, r4
 8003394:	609a      	str	r2, [r3, #8]
}
 8003396:	bf00      	nop
 8003398:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	51eb851f 	.word	0x51eb851f

080033a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <MX_FATFS_Init+0x18>)
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <MX_FATFS_Init+0x1c>)
 80033b0:	f004 f8b4 	bl	800751c <FATFS_LinkDriver>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <MX_FATFS_Init+0x20>)
 80033ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000248 	.word	0x20000248
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	20000244 	.word	0x20000244

080033cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80033d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9fd 	bl	80037e8 <SD_disk_initialize>
 80033ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fad5 	bl	80039b4 <SD_disk_status>
 800340a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003424:	7bf8      	ldrb	r0, [r7, #15]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	f000 fad8 	bl	80039e0 <SD_disk_read>
 8003430:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800344a:	7bf8      	ldrb	r0, [r7, #15]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	f000 fb2f 	bl	8003ab4 <SD_disk_write>
 8003456:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	603a      	str	r2, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
 800346c:	460b      	mov	r3, r1
 800346e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003470:	79b9      	ldrb	r1, [r7, #6]
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fba0 	bl	8003bbc <SD_disk_ioctl>
 800347c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800348c:	2200      	movs	r2, #0
 800348e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003492:	4802      	ldr	r0, [pc, #8]	; (800349c <SELECT+0x14>)
 8003494:	f7fe fb22 	bl	8001adc <HAL_GPIO_WritePin>
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40020400 	.word	0x40020400

080034a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80034a4:	2201      	movs	r2, #1
 80034a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034aa:	4802      	ldr	r0, [pc, #8]	; (80034b4 <DESELECT+0x14>)
 80034ac:	f7fe fb16 	bl	8001adc <HAL_GPIO_WritePin>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020400 	.word	0x40020400

080034b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034c2:	bf00      	nop
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <SPI_TxByte+0x30>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d1f8      	bne.n	80034c4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034d2:	1df9      	adds	r1, r7, #7
 80034d4:	2364      	movs	r3, #100	; 0x64
 80034d6:	2201      	movs	r2, #1
 80034d8:	4803      	ldr	r0, [pc, #12]	; (80034e8 <SPI_TxByte+0x30>)
 80034da:	f7fe fffa 	bl	80024d2 <HAL_SPI_Transmit>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200000a4 	.word	0x200000a4

080034ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034f8:	bf00      	nop
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <SPI_TxBuffer+0x30>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d1f8      	bne.n	80034fa <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	2364      	movs	r3, #100	; 0x64
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <SPI_TxBuffer+0x30>)
 8003510:	f7fe ffdf 	bl	80024d2 <HAL_SPI_Transmit>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200000a4 	.word	0x200000a4

08003520 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8003526:	23ff      	movs	r3, #255	; 0xff
 8003528:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800352a:	bf00      	nop
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <SPI_RxByte+0x34>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d1f8      	bne.n	800352c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800353a:	1dba      	adds	r2, r7, #6
 800353c:	1df9      	adds	r1, r7, #7
 800353e:	2364      	movs	r3, #100	; 0x64
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2301      	movs	r3, #1
 8003544:	4803      	ldr	r0, [pc, #12]	; (8003554 <SPI_RxByte+0x34>)
 8003546:	f7ff f900 	bl	800274a <HAL_SPI_TransmitReceive>
  return data;
 800354a:	79bb      	ldrb	r3, [r7, #6]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200000a4 	.word	0x200000a4

08003558 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003560:	f7ff ffde 	bl	8003520 <SPI_RxByte>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	701a      	strb	r2, [r3, #0]
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <SD_ReadyWait+0x30>)
 800357c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003580:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003582:	f7ff ffcd 	bl	8003520 <SPI_RxByte>
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2bff      	cmp	r3, #255	; 0xff
 800358e:	d003      	beq.n	8003598 <SD_ReadyWait+0x24>
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <SD_ReadyWait+0x30>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f4      	bne.n	8003582 <SD_ReadyWait+0xe>
  return res;
 8003598:	79fb      	ldrb	r3, [r7, #7]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000024e 	.word	0x2000024e

080035a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80035ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80035b2:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80035b4:	f7ff ff74 	bl	80034a0 <DESELECT>
  for(int i = 0; i < 10; i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	e005      	b.n	80035ca <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80035be:	20ff      	movs	r0, #255	; 0xff
 80035c0:	f7ff ff7a 	bl	80034b8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	ddf6      	ble.n	80035be <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80035d0:	f7ff ff5a 	bl	8003488 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80035e8:	2395      	movs	r3, #149	; 0x95
 80035ea:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80035ec:	463b      	mov	r3, r7
 80035ee:	2106      	movs	r1, #6
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff7b 	bl	80034ec <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80035f6:	e002      	b.n	80035fe <SD_PowerOn+0x56>
  {
    cnt--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80035fe:	f7ff ff8f 	bl	8003520 <SPI_RxByte>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <SD_PowerOn+0x66>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f4      	bne.n	80035f8 <SD_PowerOn+0x50>
  }
  DESELECT();
 800360e:	f7ff ff47 	bl	80034a0 <DESELECT>
  SPI_TxByte(0XFF);
 8003612:	20ff      	movs	r0, #255	; 0xff
 8003614:	f7ff ff50 	bl	80034b8 <SPI_TxByte>
  PowerFlag = 1;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <SD_PowerOn+0x80>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000251 	.word	0x20000251

0800362c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <SD_PowerOff+0x14>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000251 	.word	0x20000251

08003644 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return PowerFlag;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <SD_CheckPower+0x14>)
 800364a:	781b      	ldrb	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000251 	.word	0x20000251

0800365c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <SD_RxDataBlock+0x58>)
 8003668:	22c8      	movs	r2, #200	; 0xc8
 800366a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800366c:	f7ff ff58 	bl	8003520 <SPI_RxByte>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2bff      	cmp	r3, #255	; 0xff
 8003678:	d103      	bne.n	8003682 <SD_RxDataBlock+0x26>
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <SD_RxDataBlock+0x58>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f4      	bne.n	800366c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2bfe      	cmp	r3, #254	; 0xfe
 8003686:	d001      	beq.n	800368c <SD_RxDataBlock+0x30>
 8003688:	2300      	movs	r3, #0
 800368a:	e00f      	b.n	80036ac <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff60 	bl	8003558 <SPI_RxBytePtr>
  } while(len--);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	603a      	str	r2, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f4      	bne.n	800368c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80036a2:	f7ff ff3d 	bl	8003520 <SPI_RxByte>
  SPI_RxByte();
 80036a6:	f7ff ff3b 	bl	8003520 <SPI_RxByte>
  return TRUE;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	2000024c 	.word	0x2000024c

080036b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80036c8:	f7ff ff54 	bl	8003574 <SD_ReadyWait>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	d001      	beq.n	80036d6 <SD_TxDataBlock+0x1e>
 80036d2:	2300      	movs	r3, #0
 80036d4:	e02f      	b.n	8003736 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feed 	bl	80034b8 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	2bfd      	cmp	r3, #253	; 0xfd
 80036e2:	d020      	beq.n	8003726 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80036e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff feff 	bl	80034ec <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80036ee:	f7ff ff17 	bl	8003520 <SPI_RxByte>
    SPI_RxByte();
 80036f2:	f7ff ff15 	bl	8003520 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80036f6:	e00b      	b.n	8003710 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80036f8:	f7ff ff12 	bl	8003520 <SPI_RxByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2b05      	cmp	r3, #5
 8003708:	d006      	beq.n	8003718 <SD_TxDataBlock+0x60>
      i++;
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	3301      	adds	r3, #1
 800370e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d9f0      	bls.n	80036f8 <SD_TxDataBlock+0x40>
 8003716:	e000      	b.n	800371a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8003718:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800371a:	bf00      	nop
 800371c:	f7ff ff00 	bl	8003520 <SPI_RxByte>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0fa      	beq.n	800371c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2b05      	cmp	r3, #5
 800372e:	d101      	bne.n	8003734 <SD_TxDataBlock+0x7c>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <SD_TxDataBlock+0x7e>

  return FALSE;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	6039      	str	r1, [r7, #0]
 8003748:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800374a:	f7ff ff13 	bl	8003574 <SD_ReadyWait>
 800374e:	4603      	mov	r3, r0
 8003750:	2bff      	cmp	r3, #255	; 0xff
 8003752:	d001      	beq.n	8003758 <SD_SendCmd+0x1a>
 8003754:	23ff      	movs	r3, #255	; 0xff
 8003756:	e042      	b.n	80037de <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff feac 	bl	80034b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	0e1b      	lsrs	r3, r3, #24
 8003764:	b2db      	uxtb	r3, r3
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fea6 	bl	80034b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fea0 	bl	80034b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fe9a 	bl	80034b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fe95 	bl	80034b8 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d102      	bne.n	800379a <SD_SendCmd+0x5c>
 8003794:	2395      	movs	r3, #149	; 0x95
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e007      	b.n	80037aa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2b48      	cmp	r3, #72	; 0x48
 800379e:	d102      	bne.n	80037a6 <SD_SendCmd+0x68>
 80037a0:	2387      	movs	r3, #135	; 0x87
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e001      	b.n	80037aa <SD_SendCmd+0x6c>
  else crc = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe83 	bl	80034b8 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	2b4c      	cmp	r3, #76	; 0x4c
 80037b6:	d101      	bne.n	80037bc <SD_SendCmd+0x7e>
 80037b8:	f7ff feb2 	bl	8003520 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 80037bc:	230a      	movs	r3, #10
 80037be:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80037c0:	f7ff feae 	bl	8003520 <SPI_RxByte>
 80037c4:	4603      	mov	r3, r0
 80037c6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80037c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da05      	bge.n	80037dc <SD_SendCmd+0x9e>
 80037d0:	7bbb      	ldrb	r3, [r7, #14]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	73bb      	strb	r3, [r7, #14]
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f1      	bne.n	80037c0 <SD_SendCmd+0x82>

  return res;
 80037dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <SD_disk_initialize+0x14>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d1      	b.n	80039a0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <SD_disk_initialize+0x1c0>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <SD_disk_initialize+0x2a>
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <SD_disk_initialize+0x1c0>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e0c6      	b.n	80039a0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8003812:	f7ff fec9 	bl	80035a8 <SD_PowerOn>
  /* slave select */
  SELECT();
 8003816:	f7ff fe37 	bl	8003488 <SELECT>
  /* check disk type */
  type = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800381e:	2100      	movs	r1, #0
 8003820:	2040      	movs	r0, #64	; 0x40
 8003822:	f7ff ff8c 	bl	800373e <SD_SendCmd>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 80a1 	bne.w	8003970 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800382e:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <SD_disk_initialize+0x1c4>)
 8003830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003834:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003836:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800383a:	2048      	movs	r0, #72	; 0x48
 800383c:	f7ff ff7f 	bl	800373e <SD_SendCmd>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d155      	bne.n	80038f2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e00c      	b.n	8003866 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800384c:	7bfc      	ldrb	r4, [r7, #15]
 800384e:	f7ff fe67 	bl	8003520 <SPI_RxByte>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	f104 0310 	add.w	r3, r4, #16
 800385a:	443b      	add	r3, r7
 800385c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	3301      	adds	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d9ef      	bls.n	800384c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800386c:	7abb      	ldrb	r3, [r7, #10]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d17e      	bne.n	8003970 <SD_disk_initialize+0x188>
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	2baa      	cmp	r3, #170	; 0xaa
 8003876:	d17b      	bne.n	8003970 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003878:	2100      	movs	r1, #0
 800387a:	2077      	movs	r0, #119	; 0x77
 800387c:	f7ff ff5f 	bl	800373e <SD_SendCmd>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d807      	bhi.n	8003896 <SD_disk_initialize+0xae>
 8003886:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800388a:	2069      	movs	r0, #105	; 0x69
 800388c:	f7ff ff57 	bl	800373e <SD_SendCmd>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <SD_disk_initialize+0x1c4>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ec      	bne.n	8003878 <SD_disk_initialize+0x90>
 800389e:	e000      	b.n	80038a2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038a0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <SD_disk_initialize+0x1c4>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d062      	beq.n	8003970 <SD_disk_initialize+0x188>
 80038aa:	2100      	movs	r1, #0
 80038ac:	207a      	movs	r0, #122	; 0x7a
 80038ae:	f7ff ff46 	bl	800373e <SD_SendCmd>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d15b      	bne.n	8003970 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e00c      	b.n	80038d8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80038be:	7bfc      	ldrb	r4, [r7, #15]
 80038c0:	f7ff fe2e 	bl	8003520 <SPI_RxByte>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	f104 0310 	add.w	r3, r4, #16
 80038cc:	443b      	add	r3, r7
 80038ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	3301      	adds	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d9ef      	bls.n	80038be <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80038de:	7a3b      	ldrb	r3, [r7, #8]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SD_disk_initialize+0x104>
 80038e8:	230c      	movs	r3, #12
 80038ea:	e000      	b.n	80038ee <SD_disk_initialize+0x106>
 80038ec:	2304      	movs	r3, #4
 80038ee:	73bb      	strb	r3, [r7, #14]
 80038f0:	e03e      	b.n	8003970 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80038f2:	2100      	movs	r1, #0
 80038f4:	2077      	movs	r0, #119	; 0x77
 80038f6:	f7ff ff22 	bl	800373e <SD_SendCmd>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d808      	bhi.n	8003912 <SD_disk_initialize+0x12a>
 8003900:	2100      	movs	r1, #0
 8003902:	2069      	movs	r0, #105	; 0x69
 8003904:	f7ff ff1b 	bl	800373e <SD_SendCmd>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d801      	bhi.n	8003912 <SD_disk_initialize+0x12a>
 800390e:	2302      	movs	r3, #2
 8003910:	e000      	b.n	8003914 <SD_disk_initialize+0x12c>
 8003912:	2301      	movs	r3, #1
 8003914:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d10e      	bne.n	800393a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800391c:	2100      	movs	r1, #0
 800391e:	2077      	movs	r0, #119	; 0x77
 8003920:	f7ff ff0d 	bl	800373e <SD_SendCmd>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d80e      	bhi.n	8003948 <SD_disk_initialize+0x160>
 800392a:	2100      	movs	r1, #0
 800392c:	2069      	movs	r0, #105	; 0x69
 800392e:	f7ff ff06 	bl	800373e <SD_SendCmd>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <SD_disk_initialize+0x160>
 8003938:	e00c      	b.n	8003954 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800393a:	2100      	movs	r1, #0
 800393c:	2041      	movs	r0, #65	; 0x41
 800393e:	f7ff fefe 	bl	800373e <SD_SendCmd>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <SD_disk_initialize+0x1c4>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e2      	bne.n	8003916 <SD_disk_initialize+0x12e>
 8003950:	e000      	b.n	8003954 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003952:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <SD_disk_initialize+0x1c4>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <SD_disk_initialize+0x184>
 800395c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003960:	2050      	movs	r0, #80	; 0x50
 8003962:	f7ff feec 	bl	800373e <SD_SendCmd>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <SD_disk_initialize+0x188>
 800396c:	2300      	movs	r3, #0
 800396e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <SD_disk_initialize+0x1c8>)
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8003976:	f7ff fd93 	bl	80034a0 <DESELECT>
  SPI_RxByte();
 800397a:	f7ff fdd1 	bl	8003520 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800397e:	7bbb      	ldrb	r3, [r7, #14]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <SD_disk_initialize+0x1c0>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <SD_disk_initialize+0x1c0>)
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e001      	b.n	800399a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003996:	f7ff fe49 	bl	800362c <SD_PowerOff>
  }
  return Stat;
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <SD_disk_initialize+0x1c0>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	20000020 	.word	0x20000020
 80039ac:	2000024c 	.word	0x2000024c
 80039b0:	20000250 	.word	0x20000250

080039b4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <SD_disk_status+0x14>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e002      	b.n	80039ce <SD_disk_status+0x1a>
  return Stat;
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <SD_disk_status+0x28>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000020 	.word	0x20000020

080039e0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <SD_disk_read+0x1c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <SD_disk_read+0x20>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e051      	b.n	8003aa4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <SD_disk_read+0xcc>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <SD_disk_read+0x32>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e048      	b.n	8003aa4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <SD_disk_read+0xd0>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <SD_disk_read+0x44>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	025b      	lsls	r3, r3, #9
 8003a22:	607b      	str	r3, [r7, #4]

  SELECT();
 8003a24:	f7ff fd30 	bl	8003488 <SELECT>

  if (count == 1)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d111      	bne.n	8003a52 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	2051      	movs	r0, #81	; 0x51
 8003a32:	f7ff fe84 	bl	800373e <SD_SendCmd>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d129      	bne.n	8003a90 <SD_disk_read+0xb0>
 8003a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a40:	68b8      	ldr	r0, [r7, #8]
 8003a42:	f7ff fe0b 	bl	800365c <SD_RxDataBlock>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d021      	beq.n	8003a90 <SD_disk_read+0xb0>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	e01e      	b.n	8003a90 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	2052      	movs	r0, #82	; 0x52
 8003a56:	f7ff fe72 	bl	800373e <SD_SendCmd>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d117      	bne.n	8003a90 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f7ff fdf9 	bl	800365c <SD_RxDataBlock>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <SD_disk_read+0xa6>
        buff += 512;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a76:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ed      	bne.n	8003a60 <SD_disk_read+0x80>
 8003a84:	e000      	b.n	8003a88 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003a86:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003a88:	2100      	movs	r1, #0
 8003a8a:	204c      	movs	r0, #76	; 0x4c
 8003a8c:	f7ff fe57 	bl	800373e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003a90:	f7ff fd06 	bl	80034a0 <DESELECT>
  SPI_RxByte();
 8003a94:	f7ff fd44 	bl	8003520 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000020 	.word	0x20000020
 8003ab0:	20000250 	.word	0x20000250

08003ab4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <SD_disk_write+0x1c>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <SD_disk_write+0x20>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e06b      	b.n	8003bac <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <SD_disk_write+0x100>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <SD_disk_write+0x32>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e062      	b.n	8003bac <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <SD_disk_write+0x100>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <SD_disk_write+0x44>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e059      	b.n	8003bac <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <SD_disk_write+0x104>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <SD_disk_write+0x56>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	025b      	lsls	r3, r3, #9
 8003b08:	607b      	str	r3, [r7, #4]

  SELECT();
 8003b0a:	f7ff fcbd 	bl	8003488 <SELECT>

  if (count == 1)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d110      	bne.n	8003b36 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	2058      	movs	r0, #88	; 0x58
 8003b18:	f7ff fe11 	bl	800373e <SD_SendCmd>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13a      	bne.n	8003b98 <SD_disk_write+0xe4>
 8003b22:	21fe      	movs	r1, #254	; 0xfe
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f7ff fdc7 	bl	80036b8 <SD_TxDataBlock>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d033      	beq.n	8003b98 <SD_disk_write+0xe4>
      count = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	e030      	b.n	8003b98 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <SD_disk_write+0x104>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003b42:	2100      	movs	r1, #0
 8003b44:	2077      	movs	r0, #119	; 0x77
 8003b46:	f7ff fdfa 	bl	800373e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	2057      	movs	r0, #87	; 0x57
 8003b4e:	f7ff fdf6 	bl	800373e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	2059      	movs	r0, #89	; 0x59
 8003b56:	f7ff fdf2 	bl	800373e <SD_SendCmd>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11b      	bne.n	8003b98 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b60:	21fc      	movs	r1, #252	; 0xfc
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	f7ff fda8 	bl	80036b8 <SD_TxDataBlock>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <SD_disk_write+0xd0>
        buff += 512;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b74:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ee      	bne.n	8003b60 <SD_disk_write+0xac>
 8003b82:	e000      	b.n	8003b86 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b84:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003b86:	21fd      	movs	r1, #253	; 0xfd
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7ff fd95 	bl	80036b8 <SD_TxDataBlock>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <SD_disk_write+0xe4>
      {
        count = 1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8003b98:	f7ff fc82 	bl	80034a0 <DESELECT>
  SPI_RxByte();
 8003b9c:	f7ff fcc0 	bl	8003520 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000020 	.word	0x20000020
 8003bb8:	20000250 	.word	0x20000250

08003bbc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b08b      	sub	sp, #44	; 0x2c
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	603a      	str	r2, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <SD_disk_ioctl+0x1e>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e115      	b.n	8003e06 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8003be0:	79bb      	ldrb	r3, [r7, #6]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d124      	bne.n	8003c30 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d012      	beq.n	8003c14 <SD_disk_ioctl+0x58>
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	dc1a      	bgt.n	8003c28 <SD_disk_ioctl+0x6c>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <SD_disk_ioctl+0x40>
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d006      	beq.n	8003c08 <SD_disk_ioctl+0x4c>
 8003bfa:	e015      	b.n	8003c28 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003bfc:	f7ff fd16 	bl	800362c <SD_PowerOff>
      res = RES_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003c06:	e0fc      	b.n	8003e02 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8003c08:	f7ff fcce 	bl	80035a8 <SD_PowerOn>
      res = RES_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003c12:	e0f6      	b.n	8003e02 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	1c5c      	adds	r4, r3, #1
 8003c18:	f7ff fd14 	bl	8003644 <SD_CheckPower>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003c26:	e0ec      	b.n	8003e02 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c2e:	e0e8      	b.n	8003e02 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003c30:	4b77      	ldr	r3, [pc, #476]	; (8003e10 <SD_disk_ioctl+0x254>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0e1      	b.n	8003e06 <SD_disk_ioctl+0x24a>
    }
    SELECT();
 8003c42:	f7ff fc21 	bl	8003488 <SELECT>
    switch (ctrl)
 8003c46:	79bb      	ldrb	r3, [r7, #6]
 8003c48:	2b0d      	cmp	r3, #13
 8003c4a:	f200 80cb 	bhi.w	8003de4 <SD_disk_ioctl+0x228>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <SD_disk_ioctl+0x98>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003d4f 	.word	0x08003d4f
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003d3f 	.word	0x08003d3f
 8003c60:	08003de5 	.word	0x08003de5
 8003c64:	08003de5 	.word	0x08003de5
 8003c68:	08003de5 	.word	0x08003de5
 8003c6c:	08003de5 	.word	0x08003de5
 8003c70:	08003de5 	.word	0x08003de5
 8003c74:	08003de5 	.word	0x08003de5
 8003c78:	08003de5 	.word	0x08003de5
 8003c7c:	08003de5 	.word	0x08003de5
 8003c80:	08003d61 	.word	0x08003d61
 8003c84:	08003d85 	.word	0x08003d85
 8003c88:	08003da9 	.word	0x08003da9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	2049      	movs	r0, #73	; 0x49
 8003c90:	f7ff fd55 	bl	800373e <SD_SendCmd>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 80a8 	bne.w	8003dec <SD_disk_ioctl+0x230>
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	2110      	movs	r1, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fcda 	bl	800365c <SD_RxDataBlock>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 809e 	beq.w	8003dec <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8003cb0:	7b3b      	ldrb	r3, [r7, #12]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10e      	bne.n	8003cd8 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003cba:	7d7b      	ldrb	r3, [r7, #21]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	7d3b      	ldrb	r3, [r7, #20]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003cce:	8bfb      	ldrh	r3, [r7, #30]
 8003cd0:	029a      	lsls	r2, r3, #10
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e02e      	b.n	8003d36 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	7dbb      	ldrb	r3, [r7, #22]
 8003ce2:	09db      	lsrs	r3, r3, #7
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	7d7b      	ldrb	r3, [r7, #21]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003d00:	7d3b      	ldrb	r3, [r7, #20]
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	7cbb      	ldrb	r3, [r7, #18]
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003d28:	8bfa      	ldrh	r2, [r7, #30]
 8003d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d2e:	3b09      	subs	r3, #9
 8003d30:	409a      	lsls	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003d3c:	e056      	b.n	8003dec <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003d4c:	e055      	b.n	8003dfa <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003d4e:	f7ff fc11 	bl	8003574 <SD_ReadyWait>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2bff      	cmp	r3, #255	; 0xff
 8003d56:	d14b      	bne.n	8003df0 <SD_disk_ioctl+0x234>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003d5e:	e047      	b.n	8003df0 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d60:	2100      	movs	r1, #0
 8003d62:	2049      	movs	r0, #73	; 0x49
 8003d64:	f7ff fceb 	bl	800373e <SD_SendCmd>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d142      	bne.n	8003df4 <SD_disk_ioctl+0x238>
 8003d6e:	2110      	movs	r1, #16
 8003d70:	6a38      	ldr	r0, [r7, #32]
 8003d72:	f7ff fc73 	bl	800365c <SD_RxDataBlock>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03b      	beq.n	8003df4 <SD_disk_ioctl+0x238>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003d82:	e037      	b.n	8003df4 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d84:	2100      	movs	r1, #0
 8003d86:	204a      	movs	r0, #74	; 0x4a
 8003d88:	f7ff fcd9 	bl	800373e <SD_SendCmd>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d132      	bne.n	8003df8 <SD_disk_ioctl+0x23c>
 8003d92:	2110      	movs	r1, #16
 8003d94:	6a38      	ldr	r0, [r7, #32]
 8003d96:	f7ff fc61 	bl	800365c <SD_RxDataBlock>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02b      	beq.n	8003df8 <SD_disk_ioctl+0x23c>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003da6:	e027      	b.n	8003df8 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003da8:	2100      	movs	r1, #0
 8003daa:	207a      	movs	r0, #122	; 0x7a
 8003dac:	f7ff fcc7 	bl	800373e <SD_SendCmd>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003dbc:	e00b      	b.n	8003dd6 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8003dbe:	6a3c      	ldr	r4, [r7, #32]
 8003dc0:	1c63      	adds	r3, r4, #1
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	f7ff fbac 	bl	8003520 <SPI_RxByte>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d9ef      	bls.n	8003dbe <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dea:	e006      	b.n	8003dfa <SD_disk_ioctl+0x23e>
      break;
 8003dec:	bf00      	nop
 8003dee:	e004      	b.n	8003dfa <SD_disk_ioctl+0x23e>
      break;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <SD_disk_ioctl+0x23e>
      break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <SD_disk_ioctl+0x23e>
      break;
 8003df8:	bf00      	nop
    }
    DESELECT();
 8003dfa:	f7ff fb51 	bl	80034a0 <DESELECT>
    SPI_RxByte();
 8003dfe:	f7ff fb8f 	bl	8003520 <SPI_RxByte>
  }
  return res;
 8003e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	372c      	adds	r7, #44	; 0x2c
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000020 	.word	0x20000020

08003e14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <disk_status+0x30>)
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	4905      	ldr	r1, [pc, #20]	; (8003e44 <disk_status+0x30>)
 8003e2e:	440a      	add	r2, r1
 8003e30:	7a12      	ldrb	r2, [r2, #8]
 8003e32:	4610      	mov	r0, r2
 8003e34:	4798      	blx	r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	2000047c 	.word	0x2000047c

08003e48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <disk_initialize+0x48>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <disk_initialize+0x48>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <disk_initialize+0x48>)
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	79fa      	ldrb	r2, [r7, #7]
 8003e76:	4906      	ldr	r1, [pc, #24]	; (8003e90 <disk_initialize+0x48>)
 8003e78:	440a      	add	r2, r1
 8003e7a:	7a12      	ldrb	r2, [r2, #8]
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000047c 	.word	0x2000047c

08003e94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <disk_read+0x3c>)
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	689c      	ldr	r4, [r3, #8]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <disk_read+0x3c>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	7a18      	ldrb	r0, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	47a0      	blx	r4
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000047c 	.word	0x2000047c

08003ed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <disk_write+0x3c>)
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68dc      	ldr	r4, [r3, #12]
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <disk_write+0x3c>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	7a18      	ldrb	r0, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	47a0      	blx	r4
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000047c 	.word	0x2000047c

08003f14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	603a      	str	r2, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
 8003f20:	460b      	mov	r3, r1
 8003f22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <disk_ioctl+0x38>)
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	4906      	ldr	r1, [pc, #24]	; (8003f4c <disk_ioctl+0x38>)
 8003f34:	440a      	add	r2, r1
 8003f36:	7a10      	ldrb	r0, [r2, #8]
 8003f38:	79b9      	ldrb	r1, [r7, #6]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4798      	blx	r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2000047c 	.word	0x2000047c

08003f50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b21b      	sxth	r3, r3
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f72:	89fb      	ldrh	r3, [r7, #14]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3303      	adds	r3, #3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	3202      	adds	r2, #2
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	1c53      	adds	r3, r2, #1
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1c59      	adds	r1, r3, #1
 8004078:	6179      	str	r1, [r7, #20]
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3b01      	subs	r3, #1
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <mem_cpy+0x1a>
	}
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	617a      	str	r2, [r7, #20]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f3      	bne.n	80040a6 <mem_set+0x10>
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	61fa      	str	r2, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	61ba      	str	r2, [r7, #24]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <mem_cmp+0x40>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0eb      	beq.n	80040e4 <mem_cmp+0x18>

	return r;
 800410c:	697b      	ldr	r3, [r7, #20]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004124:	e002      	b.n	800412c <chk_chr+0x12>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3301      	adds	r3, #1
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <chk_chr+0x26>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4293      	cmp	r3, r2
 800413e:	d1f2      	bne.n	8004126 <chk_chr+0xc>
	return *str;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	781b      	ldrb	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e029      	b.n	80041b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <chk_lock+0xb4>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4413      	add	r3, r2
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01d      	beq.n	80041ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004172:	4a24      	ldr	r2, [pc, #144]	; (8004204 <chk_lock+0xb4>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4413      	add	r3, r2
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d116      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <chk_lock+0xb4>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004194:	429a      	cmp	r2, r3
 8004196:	d10c      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004198:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <chk_lock+0xb4>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4413      	add	r3, r2
 80041a0:	3308      	adds	r3, #8
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d102      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041ac:	e007      	b.n	80041be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d9d2      	bls.n	8004164 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d109      	bne.n	80041d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <chk_lock+0x80>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d101      	bne.n	80041d4 <chk_lock+0x84>
 80041d0:	2300      	movs	r3, #0
 80041d2:	e010      	b.n	80041f6 <chk_lock+0xa6>
 80041d4:	2312      	movs	r3, #18
 80041d6:	e00e      	b.n	80041f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <chk_lock+0xa0>
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <chk_lock+0xb4>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	330c      	adds	r3, #12
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d101      	bne.n	80041f4 <chk_lock+0xa4>
 80041f0:	2310      	movs	r3, #16
 80041f2:	e000      	b.n	80041f6 <chk_lock+0xa6>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000025c 	.word	0x2000025c

08004208 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	e002      	b.n	800421a <enq_lock+0x12>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d806      	bhi.n	800422e <enq_lock+0x26>
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <enq_lock+0x40>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f2      	bne.n	8004214 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b02      	cmp	r3, #2
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000025c 	.word	0x2000025c

0800424c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e01f      	b.n	800429c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800425c:	4a41      	ldr	r2, [pc, #260]	; (8004364 <inc_lock+0x118>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d113      	bne.n	8004296 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800426e:	4a3d      	ldr	r2, [pc, #244]	; (8004364 <inc_lock+0x118>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800427e:	429a      	cmp	r2, r3
 8004280:	d109      	bne.n	8004296 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004282:	4a38      	ldr	r2, [pc, #224]	; (8004364 <inc_lock+0x118>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	3308      	adds	r3, #8
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004292:	429a      	cmp	r2, r3
 8004294:	d006      	beq.n	80042a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d9dc      	bls.n	800425c <inc_lock+0x10>
 80042a2:	e000      	b.n	80042a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d132      	bne.n	8004312 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e002      	b.n	80042b8 <inc_lock+0x6c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d806      	bhi.n	80042cc <inc_lock+0x80>
 80042be:	4a29      	ldr	r2, [pc, #164]	; (8004364 <inc_lock+0x118>)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	4413      	add	r3, r2
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f2      	bne.n	80042b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d101      	bne.n	80042d6 <inc_lock+0x8a>
 80042d2:	2300      	movs	r3, #0
 80042d4:	e040      	b.n	8004358 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <inc_lock+0x118>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	440b      	add	r3, r1
 80042e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	491e      	ldr	r1, [pc, #120]	; (8004364 <inc_lock+0x118>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	440b      	add	r3, r1
 80042f0:	3304      	adds	r3, #4
 80042f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	491a      	ldr	r1, [pc, #104]	; (8004364 <inc_lock+0x118>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	440b      	add	r3, r1
 8004300:	3308      	adds	r3, #8
 8004302:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <inc_lock+0x118>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	330c      	adds	r3, #12
 800430e:	2200      	movs	r2, #0
 8004310:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <inc_lock+0xe0>
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <inc_lock+0x118>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	330c      	adds	r3, #12
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <inc_lock+0xe0>
 8004328:	2300      	movs	r3, #0
 800432a:	e015      	b.n	8004358 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <inc_lock+0xf8>
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <inc_lock+0x118>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	330c      	adds	r3, #12
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	e001      	b.n	8004348 <inc_lock+0xfc>
 8004344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <inc_lock+0x118>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	440b      	add	r3, r1
 8004350:	330c      	adds	r3, #12
 8004352:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3301      	adds	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	2000025c 	.word	0x2000025c

08004368 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d825      	bhi.n	80043c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800437c:	4a17      	ldr	r2, [pc, #92]	; (80043dc <dec_lock+0x74>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	330c      	adds	r3, #12
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004390:	d101      	bne.n	8004396 <dec_lock+0x2e>
 8004392:	2300      	movs	r3, #0
 8004394:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004396:	89fb      	ldrh	r3, [r7, #14]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <dec_lock+0x3a>
 800439c:	89fb      	ldrh	r3, [r7, #14]
 800439e:	3b01      	subs	r3, #1
 80043a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043a2:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <dec_lock+0x74>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	330c      	adds	r3, #12
 80043ac:	89fa      	ldrh	r2, [r7, #14]
 80043ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043b0:	89fb      	ldrh	r3, [r7, #14]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <dec_lock+0x5a>
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <dec_lock+0x74>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	737b      	strb	r3, [r7, #13]
 80043c6:	e001      	b.n	80043cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043c8:	2302      	movs	r3, #2
 80043ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	2000025c 	.word	0x2000025c

080043e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e010      	b.n	8004410 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <clear_lock+0x44>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d105      	bne.n	800440a <clear_lock+0x2a>
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <clear_lock+0x44>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4413      	add	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d9eb      	bls.n	80043ee <clear_lock+0xe>
	}
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	2000025c 	.word	0x2000025c

08004428 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d034      	beq.n	80044a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7858      	ldrb	r0, [r3, #1]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800444c:	2301      	movs	r3, #1
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	f7ff fd40 	bl	8003ed4 <disk_write>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <sync_window+0x38>
			res = FR_DISK_ERR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e022      	b.n	80044a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	429a      	cmp	r2, r3
 8004474:	d217      	bcs.n	80044a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	789b      	ldrb	r3, [r3, #2]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e010      	b.n	80044a0 <sync_window+0x78>
					wsect += fs->fsize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7858      	ldrb	r0, [r3, #1]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004492:	2301      	movs	r3, #1
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	f7ff fd1d 	bl	8003ed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3b01      	subs	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d8eb      	bhi.n	800447e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d01b      	beq.n	8004500 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ffad 	bl	8004428 <sync_window>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d113      	bne.n	8004500 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7858      	ldrb	r0, [r3, #1]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044e2:	2301      	movs	r3, #1
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	f7ff fcd5 	bl	8003e94 <disk_read>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff87 	bl	8004428 <sync_window>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d159      	bne.n	80045d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d149      	bne.n	80045c0 <sync_fs+0xb4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d145      	bne.n	80045c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	899b      	ldrh	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	2100      	movs	r1, #0
 8004542:	f7ff fda8 	bl	8004096 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3338      	adds	r3, #56	; 0x38
 800454a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800454e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fd37 	bl	8003fc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	4921      	ldr	r1, [pc, #132]	; (80045e4 <sync_fs+0xd8>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fd4c 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3338      	adds	r3, #56	; 0x38
 8004568:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800456c:	491e      	ldr	r1, [pc, #120]	; (80045e8 <sync_fs+0xdc>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd44 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3338      	adds	r3, #56	; 0x38
 8004578:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7ff fd3a 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3338      	adds	r3, #56	; 0x38
 800458c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7ff fd30 	bl	8003ffc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7858      	ldrb	r0, [r3, #1]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	2301      	movs	r3, #1
 80045b6:	f7ff fc8d 	bl	8003ed4 <disk_write>
			fs->fsi_flag = 0;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fca3 	bl	8003f14 <disk_ioctl>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <sync_fs+0xcc>
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	41615252 	.word	0x41615252
 80045e8:	61417272 	.word	0x61417272

080045ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3b02      	subs	r3, #2
 80045fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	3b02      	subs	r3, #2
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d301      	bcc.n	800460c <clust2sect+0x20>
 8004608:	2300      	movs	r3, #0
 800460a:	e008      	b.n	800461e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	895b      	ldrh	r3, [r3, #10]
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4413      	add	r3, r2
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d904      	bls.n	800464a <get_fat+0x20>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <get_fat+0x26>
		val = 1;	/* Internal error */
 800464a:	2301      	movs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e0bb      	b.n	80047c8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b03      	cmp	r3, #3
 800465c:	f000 8083 	beq.w	8004766 <get_fat+0x13c>
 8004660:	2b03      	cmp	r3, #3
 8004662:	f300 80a7 	bgt.w	80047b4 <get_fat+0x18a>
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <get_fat+0x46>
 800466a:	2b02      	cmp	r3, #2
 800466c:	d056      	beq.n	800471c <get_fat+0xf2>
 800466e:	e0a1      	b.n	80047b4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	899b      	ldrh	r3, [r3, #12]
 8004686:	4619      	mov	r1, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	fbb3 f3f1 	udiv	r3, r3, r1
 800468e:	4413      	add	r3, r2
 8004690:	4619      	mov	r1, r3
 8004692:	6938      	ldr	r0, [r7, #16]
 8004694:	f7ff ff0c 	bl	80044b0 <move_window>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 808d 	bne.w	80047ba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	60fa      	str	r2, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	8992      	ldrh	r2, [r2, #12]
 80046aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ae:	fb01 f202 	mul.w	r2, r1, r2
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	899b      	ldrh	r3, [r3, #12]
 80046c6:	4619      	mov	r1, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ce:	4413      	add	r3, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7ff feec 	bl	80044b0 <move_window>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d16f      	bne.n	80047be <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	899b      	ldrh	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ea:	fb01 f202 	mul.w	r2, r1, r2
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <get_fat+0xe8>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	e002      	b.n	8004718 <get_fat+0xee>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	617b      	str	r3, [r7, #20]
			break;
 800471a:	e055      	b.n	80047c8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	899b      	ldrh	r3, [r3, #12]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004730:	4413      	add	r3, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6938      	ldr	r0, [r7, #16]
 8004736:	f7ff febb 	bl	80044b0 <move_window>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d140      	bne.n	80047c2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	8992      	ldrh	r2, [r2, #12]
 800474e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004752:	fb00 f202 	mul.w	r2, r0, r2
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	440b      	add	r3, r1
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fbf8 	bl	8003f50 <ld_word>
 8004760:	4603      	mov	r3, r0
 8004762:	617b      	str	r3, [r7, #20]
			break;
 8004764:	e030      	b.n	80047c8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	899b      	ldrh	r3, [r3, #12]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	b29b      	uxth	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	4413      	add	r3, r2
 800477c:	4619      	mov	r1, r3
 800477e:	6938      	ldr	r0, [r7, #16]
 8004780:	f7ff fe96 	bl	80044b0 <move_window>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	8992      	ldrh	r2, [r2, #12]
 8004798:	fbb3 f0f2 	udiv	r0, r3, r2
 800479c:	fb00 f202 	mul.w	r2, r0, r2
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fbeb 	bl	8003f80 <ld_dword>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047b0:	617b      	str	r3, [r7, #20]
			break;
 80047b2:	e009      	b.n	80047c8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e006      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047ba:	bf00      	nop
 80047bc:	e004      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047c6:	bf00      	nop
		}
	}

	return val;
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047d2:	b590      	push	{r4, r7, lr}
 80047d4:	b089      	sub	sp, #36	; 0x24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047de:	2302      	movs	r3, #2
 80047e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	f240 8102 	bls.w	80049ee <put_fat+0x21c>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	f080 80fc 	bcs.w	80049ee <put_fat+0x21c>
		switch (fs->fs_type) {
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	f000 80b6 	beq.w	800496c <put_fat+0x19a>
 8004800:	2b03      	cmp	r3, #3
 8004802:	f300 80fd 	bgt.w	8004a00 <put_fat+0x22e>
 8004806:	2b01      	cmp	r3, #1
 8004808:	d003      	beq.n	8004812 <put_fat+0x40>
 800480a:	2b02      	cmp	r3, #2
 800480c:	f000 8083 	beq.w	8004916 <put_fat+0x144>
 8004810:	e0f6      	b.n	8004a00 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4413      	add	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	899b      	ldrh	r3, [r3, #12]
 8004828:	4619      	mov	r1, r3
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004830:	4413      	add	r3, r2
 8004832:	4619      	mov	r1, r3
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff fe3b 	bl	80044b0 <move_window>
 800483a:	4603      	mov	r3, r0
 800483c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 80d6 	bne.w	80049f2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	61ba      	str	r2, [r7, #24]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	8992      	ldrh	r2, [r2, #12]
 8004856:	fbb3 f0f2 	udiv	r0, r3, r2
 800485a:	fb00 f202 	mul.w	r2, r0, r2
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	440b      	add	r3, r1
 8004862:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <put_fat+0xb8>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	b25a      	sxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	b25b      	sxtb	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b25b      	sxtb	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e001      	b.n	800488e <put_fat+0xbc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	899b      	ldrh	r3, [r3, #12]
 80048a0:	4619      	mov	r1, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a8:	4413      	add	r3, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fdff 	bl	80044b0 <move_window>
 80048b2:	4603      	mov	r3, r0
 80048b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 809c 	bne.w	80049f6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	899b      	ldrh	r3, [r3, #12]
 80048c8:	461a      	mov	r2, r3
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80048d0:	fb00 f202 	mul.w	r2, r0, r2
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	440b      	add	r3, r1
 80048d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <put_fat+0x11a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e00e      	b.n	800490a <put_fat+0x138>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	f023 030f 	bic.w	r3, r3, #15
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b25b      	sxtb	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b25b      	sxtb	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	70da      	strb	r2, [r3, #3]
			break;
 8004914:	e074      	b.n	8004a00 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	899b      	ldrh	r3, [r3, #12]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	fbb3 f3f1 	udiv	r3, r3, r1
 800492a:	4413      	add	r3, r2
 800492c:	4619      	mov	r1, r3
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fdbe 	bl	80044b0 <move_window>
 8004934:	4603      	mov	r3, r0
 8004936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d15d      	bne.n	80049fa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	8992      	ldrh	r2, [r2, #12]
 800494c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004950:	fb00 f202 	mul.w	r2, r0, r2
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	440b      	add	r3, r1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	b292      	uxth	r2, r2
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fb31 	bl	8003fc6 <st_word>
			fs->wflag = 1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	70da      	strb	r2, [r3, #3]
			break;
 800496a:	e049      	b.n	8004a00 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	899b      	ldrh	r3, [r3, #12]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	b29b      	uxth	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004980:	4413      	add	r3, r2
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fd93 	bl	80044b0 <move_window>
 800498a:	4603      	mov	r3, r0
 800498c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d134      	bne.n	80049fe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	8992      	ldrh	r2, [r2, #12]
 80049a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80049ac:	fb00 f202 	mul.w	r2, r0, r2
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fae3 	bl	8003f80 <ld_dword>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049c0:	4323      	orrs	r3, r4
 80049c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	8992      	ldrh	r2, [r2, #12]
 80049d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049d6:	fb00 f202 	mul.w	r2, r0, r2
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	440b      	add	r3, r1
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fb0b 	bl	8003ffc <st_dword>
			fs->wflag = 1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	70da      	strb	r2, [r3, #3]
			break;
 80049ec:	e008      	b.n	8004a00 <put_fat+0x22e>
		}
	}
 80049ee:	bf00      	nop
 80049f0:	e006      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049fe:	bf00      	nop
	return res;
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}

08004a0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d904      	bls.n	8004a30 <remove_chain+0x26>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d301      	bcc.n	8004a34 <remove_chain+0x2a>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e04b      	b.n	8004acc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	69b8      	ldr	r0, [r7, #24]
 8004a42:	f7ff fec6 	bl	80047d2 <put_fat>
 8004a46:	4603      	mov	r3, r0
 8004a48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <remove_chain+0x4a>
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	e03b      	b.n	8004acc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fde7 	bl	800462a <get_fat>
 8004a5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d031      	beq.n	8004ac8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <remove_chain+0x64>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e02e      	b.n	8004acc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d101      	bne.n	8004a7a <remove_chain+0x70>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e028      	b.n	8004acc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f7ff fea7 	bl	80047d2 <put_fat>
 8004a84:	4603      	mov	r3, r0
 8004a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <remove_chain+0x88>
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	e01c      	b.n	8004acc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	3b02      	subs	r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20b      	bcs.n	8004ab8 <remove_chain+0xae>
			fs->free_clst++;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3c6      	bcc.n	8004a54 <remove_chain+0x4a>
 8004ac6:	e000      	b.n	8004aca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ac8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <create_chain+0x2c>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d31b      	bcc.n	8004b38 <create_chain+0x64>
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e018      	b.n	8004b38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd8e 	bl	800462a <get_fat>
 8004b0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d801      	bhi.n	8004b1a <create_chain+0x46>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e070      	b.n	8004bfc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d101      	bne.n	8004b26 <create_chain+0x52>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	e06a      	b.n	8004bfc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d201      	bcs.n	8004b34 <create_chain+0x60>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	e063      	b.n	8004bfc <create_chain+0x128>
		scl = clst;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <create_chain+0x88>
				ncl = 2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d901      	bls.n	8004b5c <create_chain+0x88>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e04f      	b.n	8004bfc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fd63 	bl	800462a <get_fat>
 8004b64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d003      	beq.n	8004b7a <create_chain+0xa6>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d101      	bne.n	8004b7e <create_chain+0xaa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e03e      	b.n	8004bfc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1da      	bne.n	8004b3c <create_chain+0x68>
 8004b86:	2300      	movs	r3, #0
 8004b88:	e038      	b.n	8004bfc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	f7ff fe1d 	bl	80047d2 <put_fat>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <create_chain+0xe2>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6938      	ldr	r0, [r7, #16]
 8004bae:	f7ff fe10 	bl	80047d2 <put_fat>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d116      	bne.n	8004bea <create_chain+0x116>
		fs->last_clst = ncl;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d804      	bhi.n	8004bda <create_chain+0x106>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	711a      	strb	r2, [r3, #4]
 8004be8:	e007      	b.n	8004bfa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <create_chain+0x122>
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	e000      	b.n	8004bf8 <create_chain+0x124>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bfa:	69fb      	ldr	r3, [r7, #28]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	3304      	adds	r3, #4
 8004c1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	899b      	ldrh	r3, [r3, #12]
 8004c20:	461a      	mov	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	8952      	ldrh	r2, [r2, #10]
 8004c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	613a      	str	r2, [r7, #16]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <clmt_clust+0x42>
 8004c42:	2300      	movs	r3, #0
 8004c44:	e010      	b.n	8004c68 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d307      	bcc.n	8004c5e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c5c:	e7e9      	b.n	8004c32 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d204      	bcs.n	8004c96 <dir_sdi+0x22>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e071      	b.n	8004d7e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <dir_sdi+0x46>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d902      	bls.n	8004cba <dir_sdi+0x46>
		clst = fs->dirbase;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	8912      	ldrh	r2, [r2, #8]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d301      	bcc.n	8004cd0 <dir_sdi+0x5c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e056      	b.n	8004d7e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61da      	str	r2, [r3, #28]
 8004cd8:	e02d      	b.n	8004d36 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	895b      	ldrh	r3, [r3, #10]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	899b      	ldrh	r3, [r3, #12]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cea:	e019      	b.n	8004d20 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fc9a 	bl	800462a <get_fat>
 8004cf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d101      	bne.n	8004d04 <dir_sdi+0x90>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e03c      	b.n	8004d7e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d904      	bls.n	8004d14 <dir_sdi+0xa0>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d301      	bcc.n	8004d18 <dir_sdi+0xa4>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e032      	b.n	8004d7e <dir_sdi+0x10a>
			ofs -= csz;
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d2e1      	bcs.n	8004cec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7ff fc5e 	bl	80045ec <clust2sect>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <dir_sdi+0xd4>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e01a      	b.n	8004d7e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	899b      	ldrh	r3, [r3, #12]
 8004d50:	4619      	mov	r1, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d70:	fb00 f202 	mul.w	r2, r0, r2
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	18ca      	adds	r2, r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <dir_next+0x28>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d301      	bcc.n	8004db2 <dir_next+0x2c>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e0bb      	b.n	8004f2a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	899b      	ldrh	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dbe:	fb01 f202 	mul.w	r2, r1, r2
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 809d 	bne.w	8004f04 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	8912      	ldrh	r2, [r2, #8]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f0c0 808d 	bcc.w	8004f04 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	2304      	movs	r3, #4
 8004df2:	e09a      	b.n	8004f2a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	899b      	ldrh	r3, [r3, #12]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	8952      	ldrh	r2, [r2, #10]
 8004e04:	3a01      	subs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d17b      	bne.n	8004f04 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7ff fc08 	bl	800462a <get_fat>
 8004e1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d801      	bhi.n	8004e26 <dir_next+0xa0>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e081      	b.n	8004f2a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d101      	bne.n	8004e32 <dir_next+0xac>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07b      	b.n	8004f2a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d359      	bcc.n	8004ef0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e06e      	b.n	8004f2a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff fe3d 	bl	8004ad4 <create_chain>
 8004e5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <dir_next+0xe0>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e061      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <dir_next+0xea>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e05c      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d101      	bne.n	8004e7c <dir_next+0xf6>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e056      	b.n	8004f2a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fad3 	bl	8004428 <sync_window>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <dir_next+0x106>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04e      	b.n	8004f2a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	899b      	ldrh	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f7ff f8fc 	bl	8004096 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fba1 	bl	80045ec <clust2sect>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb0:	e012      	b.n	8004ed8 <dir_next+0x152>
						fs->wflag = 1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fab5 	bl	8004428 <sync_window>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <dir_next+0x142>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e030      	b.n	8004f2a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	895b      	ldrh	r3, [r3, #10]
 8004edc:	461a      	mov	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d3e6      	bcc.n	8004eb2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fb77 	bl	80045ec <clust2sect>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	899b      	ldrh	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f1c:	fb00 f202 	mul.w	r2, r0, r2
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	18ca      	adds	r2, r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fe95 	bl	8004c74 <dir_sdi>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12b      	bne.n	8004fac <dir_alloc+0x7a>
		n = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff faa6 	bl	80044b0 <move_window>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11d      	bne.n	8004faa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2be5      	cmp	r3, #229	; 0xe5
 8004f76:	d004      	beq.n	8004f82 <dir_alloc+0x50>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <dir_alloc+0x64>
 8004f90:	e00c      	b.n	8004fac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f96:	2101      	movs	r1, #1
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fef4 	bl	8004d86 <dir_next>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0d7      	beq.n	8004f58 <dir_alloc+0x26>
 8004fa8:	e000      	b.n	8004fac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004faa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d101      	bne.n	8004fb6 <dir_alloc+0x84>
 8004fb2:	2307      	movs	r3, #7
 8004fb4:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	331a      	adds	r3, #26
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffbe 	bl	8003f50 <ld_word>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d109      	bne.n	8004ff4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe ffb3 	bl	8003f50 <ld_word>
 8004fea:	4603      	mov	r3, r0
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	331a      	adds	r3, #26
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	b292      	uxth	r2, r2
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe ffd6 	bl	8003fc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d109      	bne.n	8005036 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f103 0214 	add.w	r2, r3, #20
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	b29b      	uxth	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe ffc8 	bl	8003fc6 <st_word>
	}
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	331a      	adds	r3, #26
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe ff7e 	bl	8003f50 <ld_word>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <cmp_lfn+0x1e>
 800505a:	2300      	movs	r3, #0
 800505c:	e059      	b.n	8005112 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005074:	2301      	movs	r3, #1
 8005076:	81fb      	strh	r3, [r7, #14]
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e033      	b.n	80050e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <cmp_lfn+0xdc>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4413      	add	r3, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe ff5f 	bl	8003f50 <ld_word>
 8005092:	4603      	mov	r3, r0
 8005094:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01a      	beq.n	80050d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2bfe      	cmp	r3, #254	; 0xfe
 80050a0:	d812      	bhi.n	80050c8 <cmp_lfn+0x88>
 80050a2:	89bb      	ldrh	r3, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fa85 	bl	80075b4 <ff_wtoupper>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461c      	mov	r4, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	617a      	str	r2, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f002 fa79 	bl	80075b4 <ff_wtoupper>
 80050c2:	4603      	mov	r3, r0
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d001      	beq.n	80050cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050c8:	2300      	movs	r3, #0
 80050ca:	e022      	b.n	8005112 <cmp_lfn+0xd2>
			}
			wc = uc;
 80050cc:	89bb      	ldrh	r3, [r7, #12]
 80050ce:	81fb      	strh	r3, [r7, #14]
 80050d0:	e006      	b.n	80050e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050d2:	89bb      	ldrh	r3, [r7, #12]
 80050d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d8:	4293      	cmp	r3, r2
 80050da:	d001      	beq.n	80050e0 <cmp_lfn+0xa0>
 80050dc:	2300      	movs	r3, #0
 80050de:	e018      	b.n	8005112 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d9c8      	bls.n	800507e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <cmp_lfn+0xd0>
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <cmp_lfn+0xd0>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <cmp_lfn+0xd0>
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005110:	2301      	movs	r3, #1
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop
 800511c:	08008468 	.word	0x08008468

08005120 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	4613      	mov	r3, r2
 8005134:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	330d      	adds	r3, #13
 800513a:	79ba      	ldrb	r2, [r7, #6]
 800513c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	330b      	adds	r3, #11
 8005142:	220f      	movs	r2, #15
 8005144:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	330c      	adds	r3, #12
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	331a      	adds	r3, #26
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe ff36 	bl	8003fc6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	82fb      	strh	r3, [r7, #22]
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005172:	8afb      	ldrh	r3, [r7, #22]
 8005174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <put_lfn+0x6c>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <put_lfn+0xcc>)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	8afa      	ldrh	r2, [r7, #22]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff11 	bl	8003fc6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80051a4:	8afb      	ldrh	r3, [r7, #22]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <put_lfn+0x90>
 80051aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d9da      	bls.n	8005172 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d006      	beq.n	80051d4 <put_lfn+0xb4>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <put_lfn+0xbc>
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	79fa      	ldrb	r2, [r7, #7]
 80051e0:	701a      	strb	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	08008468 	.word	0x08008468

080051f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80051fe:	220b      	movs	r2, #11
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7fe ff26 	bl	8004054 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d92b      	bls.n	8005266 <gen_numname+0x76>
		sr = seq;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005212:	e022      	b.n	800525a <gen_numname+0x6a>
			wc = *lfn++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	e017      	b.n	8005254 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005a      	lsls	r2, r3, #1
 8005228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <gen_numname+0x5e>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005248:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800524c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3301      	adds	r3, #1
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d9e4      	bls.n	8005224 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1d8      	bne.n	8005214 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005266:	2307      	movs	r3, #7
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2db      	uxtb	r3, r3
 8005274:	3330      	adds	r3, #48	; 0x30
 8005276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800527a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800527e:	2b39      	cmp	r3, #57	; 0x39
 8005280:	d904      	bls.n	800528c <gen_numname+0x9c>
 8005282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005286:	3307      	adds	r3, #7
 8005288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	1e5a      	subs	r2, r3, #1
 8005290:	62ba      	str	r2, [r7, #40]	; 0x28
 8005292:	3330      	adds	r3, #48	; 0x30
 8005294:	443b      	add	r3, r7
 8005296:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800529a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1df      	bne.n	800526a <gen_numname+0x7a>
	ns[i] = '~';
 80052aa:	f107 0214 	add.w	r2, r7, #20
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	227e      	movs	r2, #126	; 0x7e
 80052b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e002      	b.n	80052c2 <gen_numname+0xd2>
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d205      	bcs.n	80052d6 <gen_numname+0xe6>
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d1f2      	bne.n	80052bc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	2b07      	cmp	r3, #7
 80052da:	d807      	bhi.n	80052ec <gen_numname+0xfc>
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80052e2:	3330      	adds	r3, #48	; 0x30
 80052e4:	443b      	add	r3, r7
 80052e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052ea:	e000      	b.n	80052ee <gen_numname+0xfe>
 80052ec:	2120      	movs	r1, #32
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	627a      	str	r2, [r7, #36]	; 0x24
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	460a      	mov	r2, r1
 80052fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b07      	cmp	r3, #7
 8005300:	d9e9      	bls.n	80052d6 <gen_numname+0xe6>
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3730      	adds	r7, #48	; 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005318:	230b      	movs	r3, #11
 800531a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	0852      	lsrs	r2, r2, #1
 8005322:	01db      	lsls	r3, r3, #7
 8005324:	4313      	orrs	r3, r2
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	6079      	str	r1, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4413      	add	r3, r2
 8005332:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3b01      	subs	r3, #1
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ed      	bne.n	800531c <sum_sfn+0x10>
	return sum;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800535c:	2100      	movs	r1, #0
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fc88 	bl	8004c74 <dir_sdi>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <dir_find+0x24>
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	e0a9      	b.n	80054c6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	753b      	strb	r3, [r7, #20]
 8005376:	7d3b      	ldrb	r3, [r7, #20]
 8005378:	757b      	strb	r3, [r7, #21]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4619      	mov	r1, r3
 8005388:	6938      	ldr	r0, [r7, #16]
 800538a:	f7ff f891 	bl	80044b0 <move_window>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 8090 	bne.w	80054ba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053a2:	7dbb      	ldrb	r3, [r7, #22]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <dir_find+0x60>
 80053a8:	2304      	movs	r3, #4
 80053aa:	75fb      	strb	r3, [r7, #23]
 80053ac:	e08a      	b.n	80054c4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	330b      	adds	r3, #11
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053c2:	7dbb      	ldrb	r3, [r7, #22]
 80053c4:	2be5      	cmp	r3, #229	; 0xe5
 80053c6:	d007      	beq.n	80053d8 <dir_find+0x8a>
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <dir_find+0x98>
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b0f      	cmp	r3, #15
 80053d6:	d006      	beq.n	80053e6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053d8:	23ff      	movs	r3, #255	; 0xff
 80053da:	757b      	strb	r3, [r7, #21]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
 80053e4:	e05e      	b.n	80054a4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d136      	bne.n	800545a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d154      	bne.n	80054a4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	7b5b      	ldrb	r3, [r3, #13]
 800540a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800540c:	7dbb      	ldrb	r3, [r7, #22]
 800540e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005412:	75bb      	strb	r3, [r7, #22]
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005420:	7dba      	ldrb	r2, [r7, #22]
 8005422:	7d7b      	ldrb	r3, [r7, #21]
 8005424:	429a      	cmp	r2, r3
 8005426:	d115      	bne.n	8005454 <dir_find+0x106>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	330d      	adds	r3, #13
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	7d3a      	ldrb	r2, [r7, #20]
 8005432:	429a      	cmp	r2, r3
 8005434:	d10e      	bne.n	8005454 <dir_find+0x106>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff fdfd 	bl	8005040 <cmp_lfn>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <dir_find+0x106>
 800544c:	7d7b      	ldrb	r3, [r7, #21]
 800544e:	3b01      	subs	r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e000      	b.n	8005456 <dir_find+0x108>
 8005454:	23ff      	movs	r3, #255	; 0xff
 8005456:	757b      	strb	r3, [r7, #21]
 8005458:	e024      	b.n	80054a4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800545a:	7d7b      	ldrb	r3, [r7, #21]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <dir_find+0x126>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ff51 	bl	800530c <sum_sfn>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	7d3b      	ldrb	r3, [r7, #20]
 8005470:	4293      	cmp	r3, r2
 8005472:	d024      	beq.n	80054be <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <dir_find+0x14a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a18      	ldr	r0, [r3, #32]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3324      	adds	r3, #36	; 0x24
 800548a:	220b      	movs	r2, #11
 800548c:	4619      	mov	r1, r3
 800548e:	f7fe fe1d 	bl	80040cc <mem_cmp>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005498:	23ff      	movs	r3, #255	; 0xff
 800549a:	757b      	strb	r3, [r7, #21]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fc6d 	bl	8004d86 <dir_next>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f43f af65 	beq.w	8005382 <dir_find+0x34>
 80054b8:	e004      	b.n	80054c4 <dir_find+0x176>
		if (res != FR_OK) break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054c2:	bf00      	nop

	return res;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	; 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <dir_register+0x20>
 80054ec:	2306      	movs	r3, #6
 80054ee:	e0e0      	b.n	80056b2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	e002      	b.n	80054fc <dir_register+0x2c>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f4      	bne.n	80054f6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	220c      	movs	r2, #12
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fd9b 	bl	8004054 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d032      	beq.n	800558e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005530:	2301      	movs	r3, #1
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	e016      	b.n	8005564 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	f107 010c 	add.w	r1, r7, #12
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f7ff fe53 	bl	80051f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff feff 	bl	800534e <dir_find>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	3301      	adds	r3, #1
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b63      	cmp	r3, #99	; 0x63
 8005568:	d9e5      	bls.n	8005536 <dir_register+0x66>
 800556a:	e000      	b.n	800556e <dir_register+0x9e>
			if (res != FR_OK) break;
 800556c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	2b64      	cmp	r3, #100	; 0x64
 8005572:	d101      	bne.n	8005578 <dir_register+0xa8>
 8005574:	2307      	movs	r3, #7
 8005576:	e09c      	b.n	80056b2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800557c:	2b04      	cmp	r3, #4
 800557e:	d002      	beq.n	8005586 <dir_register+0xb6>
 8005580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005584:	e095      	b.n	80056b2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005586:	7dfa      	ldrb	r2, [r7, #23]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <dir_register+0xd8>
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	330c      	adds	r3, #12
 800559c:	4a47      	ldr	r2, [pc, #284]	; (80056bc <dir_register+0x1ec>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	3301      	adds	r3, #1
 80055a6:	e000      	b.n	80055aa <dir_register+0xda>
 80055a8:	2301      	movs	r3, #1
 80055aa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fcbf 	bl	8004f32 <dir_alloc>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80055ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d148      	bne.n	8005654 <dir_register+0x184>
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d042      	beq.n	8005654 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	015b      	lsls	r3, r3, #5
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fb4a 	bl	8004c74 <dir_sdi>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80055e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d132      	bne.n	8005654 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3324      	adds	r3, #36	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fe8a 	bl	800530c <sum_sfn>
 80055f8:	4603      	mov	r3, r0
 80055fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4619      	mov	r1, r3
 8005602:	69f8      	ldr	r0, [r7, #28]
 8005604:	f7fe ff54 	bl	80044b0 <move_window>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800560e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11d      	bne.n	8005652 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	6918      	ldr	r0, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a19      	ldr	r1, [r3, #32]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	7efb      	ldrb	r3, [r7, #27]
 8005624:	f7ff fd7c 	bl	8005120 <put_lfn>
				fs->wflag = 1;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2201      	movs	r2, #1
 800562c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800562e:	2100      	movs	r1, #0
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fba8 	bl	8004d86 <dir_next>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800563c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <dir_register+0x184>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	3b01      	subs	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1d5      	bne.n	80055fc <dir_register+0x12c>
 8005650:	e000      	b.n	8005654 <dir_register+0x184>
				if (res != FR_OK) break;
 8005652:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005658:	2b00      	cmp	r3, #0
 800565a:	d128      	bne.n	80056ae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	4619      	mov	r1, r3
 8005662:	69f8      	ldr	r0, [r7, #28]
 8005664:	f7fe ff24 	bl	80044b0 <move_window>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800566e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11b      	bne.n	80056ae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	2220      	movs	r2, #32
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fd09 	bl	8004096 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a18      	ldr	r0, [r3, #32]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3324      	adds	r3, #36	; 0x24
 800568c:	220b      	movs	r2, #11
 800568e:	4619      	mov	r1, r3
 8005690:	f7fe fce0 	bl	8004054 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	330c      	adds	r3, #12
 80056a0:	f002 0218 	and.w	r2, r2, #24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2201      	movs	r2, #1
 80056ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80056ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3730      	adds	r7, #48	; 0x30
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	4ec4ec4f 	.word	0x4ec4ec4f

080056c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	61ba      	str	r2, [r7, #24]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80056ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f0:	2b1f      	cmp	r3, #31
 80056f2:	d940      	bls.n	8005776 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80056f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f6:	2b2f      	cmp	r3, #47	; 0x2f
 80056f8:	d006      	beq.n	8005708 <create_name+0x48>
 80056fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fc:	2b5c      	cmp	r3, #92	; 0x5c
 80056fe:	d110      	bne.n	8005722 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005700:	e002      	b.n	8005708 <create_name+0x48>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	3301      	adds	r3, #1
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4413      	add	r3, r2
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b2f      	cmp	r3, #47	; 0x2f
 8005712:	d0f6      	beq.n	8005702 <create_name+0x42>
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4413      	add	r3, r2
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b5c      	cmp	r3, #92	; 0x5c
 800571e:	d0f0      	beq.n	8005702 <create_name+0x42>
			break;
 8005720:	e02a      	b.n	8005778 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2bfe      	cmp	r3, #254	; 0xfe
 8005726:	d901      	bls.n	800572c <create_name+0x6c>
 8005728:	2306      	movs	r3, #6
 800572a:	e17d      	b.n	8005a28 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800572c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800572e:	b2db      	uxtb	r3, r3
 8005730:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f001 ff00 	bl	800753c <ff_convert>
 800573c:	4603      	mov	r3, r0
 800573e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <create_name+0x8a>
 8005746:	2306      	movs	r3, #6
 8005748:	e16e      	b.n	8005a28 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800574a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800574c:	2b7f      	cmp	r3, #127	; 0x7f
 800574e:	d809      	bhi.n	8005764 <create_name+0xa4>
 8005750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005752:	4619      	mov	r1, r3
 8005754:	488d      	ldr	r0, [pc, #564]	; (800598c <create_name+0x2cc>)
 8005756:	f7fe fce0 	bl	800411a <chk_chr>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <create_name+0xa4>
 8005760:	2306      	movs	r3, #6
 8005762:	e161      	b.n	8005a28 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	617a      	str	r2, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005772:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005774:	e7b4      	b.n	80056e0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005776:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	441a      	add	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005784:	2b1f      	cmp	r3, #31
 8005786:	d801      	bhi.n	800578c <create_name+0xcc>
 8005788:	2304      	movs	r3, #4
 800578a:	e000      	b.n	800578e <create_name+0xce>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005792:	e011      	b.n	80057b8 <create_name+0xf8>
		w = lfn[di - 1];
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800579a:	3b01      	subs	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80057a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d002      	beq.n	80057b2 <create_name+0xf2>
 80057ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ae:	2b2e      	cmp	r3, #46	; 0x2e
 80057b0:	d106      	bne.n	80057c0 <create_name+0x100>
		di--;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ea      	bne.n	8005794 <create_name+0xd4>
 80057be:	e000      	b.n	80057c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80057c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <create_name+0x118>
 80057d4:	2306      	movs	r3, #6
 80057d6:	e127      	b.n	8005a28 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3324      	adds	r3, #36	; 0x24
 80057dc:	220b      	movs	r2, #11
 80057de:	2120      	movs	r1, #32
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fc58 	bl	8004096 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e002      	b.n	80057f2 <create_name+0x132>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d0f5      	beq.n	80057ec <create_name+0x12c>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2b2e      	cmp	r3, #46	; 0x2e
 800580c:	d0ee      	beq.n	80057ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <create_name+0x168>
 8005814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005818:	f043 0303 	orr.w	r3, r3, #3
 800581c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005820:	e002      	b.n	8005828 <create_name+0x168>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3b01      	subs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <create_name+0x182>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005834:	3b01      	subs	r3, #1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	2b2e      	cmp	r3, #46	; 0x2e
 8005840:	d1ef      	bne.n	8005822 <create_name+0x162>

	i = b = 0; ni = 8;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005848:	2300      	movs	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
 800584c:	2308      	movs	r3, #8
 800584e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8090 	beq.w	8005988 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800586a:	2b20      	cmp	r3, #32
 800586c:	d006      	beq.n	800587c <create_name+0x1bc>
 800586e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005870:	2b2e      	cmp	r3, #46	; 0x2e
 8005872:	d10a      	bne.n	800588a <create_name+0x1ca>
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d006      	beq.n	800588a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	f043 0303 	orr.w	r3, r3, #3
 8005884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005888:	e07d      	b.n	8005986 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	429a      	cmp	r2, r3
 8005890:	d203      	bcs.n	800589a <create_name+0x1da>
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	429a      	cmp	r2, r3
 8005898:	d123      	bne.n	80058e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b0b      	cmp	r3, #11
 800589e:	d106      	bne.n	80058ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80058a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a4:	f043 0303 	orr.w	r3, r3, #3
 80058a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058ac:	e075      	b.n	800599a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d005      	beq.n	80058c2 <create_name+0x202>
 80058b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ba:	f043 0303 	orr.w	r3, r3, #3
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d866      	bhi.n	8005998 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	2308      	movs	r3, #8
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	230b      	movs	r3, #11
 80058d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80058d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058e0:	e051      	b.n	8005986 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80058e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e4:	2b7f      	cmp	r3, #127	; 0x7f
 80058e6:	d914      	bls.n	8005912 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80058e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fe25 	bl	800753c <ff_convert>
 80058f2:	4603      	mov	r3, r0
 80058f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <create_name+0x246>
 80058fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fe:	3b80      	subs	r3, #128	; 0x80
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <create_name+0x2d0>)
 8005902:	5cd3      	ldrb	r3, [r2, r3]
 8005904:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <create_name+0x268>
 8005918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800591a:	4619      	mov	r1, r3
 800591c:	481d      	ldr	r0, [pc, #116]	; (8005994 <create_name+0x2d4>)
 800591e:	f7fe fbfc 	bl	800411a <chk_chr>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005928:	235f      	movs	r3, #95	; 0x5f
 800592a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800592c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005930:	f043 0303 	orr.w	r3, r3, #3
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005938:	e01b      	b.n	8005972 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d909      	bls.n	8005954 <create_name+0x294>
 8005940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005942:	2b5a      	cmp	r3, #90	; 0x5a
 8005944:	d806      	bhi.n	8005954 <create_name+0x294>
					b |= 2;
 8005946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005952:	e00e      	b.n	8005972 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005956:	2b60      	cmp	r3, #96	; 0x60
 8005958:	d90b      	bls.n	8005972 <create_name+0x2b2>
 800595a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800595c:	2b7a      	cmp	r3, #122	; 0x7a
 800595e:	d808      	bhi.n	8005972 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800596c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596e:	3b20      	subs	r3, #32
 8005970:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	623a      	str	r2, [r7, #32]
 8005978:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800597a:	b2d1      	uxtb	r1, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4413      	add	r3, r2
 8005980:	460a      	mov	r2, r1
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005986:	e763      	b.n	8005850 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005988:	bf00      	nop
 800598a:	e006      	b.n	800599a <create_name+0x2da>
 800598c:	08008388 	.word	0x08008388
 8005990:	080083e8 	.word	0x080083e8
 8005994:	08008394 	.word	0x08008394
			if (si > di) break;			/* No extension */
 8005998:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a0:	2be5      	cmp	r3, #229	; 0xe5
 80059a2:	d103      	bne.n	80059ac <create_name+0x2ec>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2205      	movs	r2, #5
 80059a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d104      	bne.n	80059bc <create_name+0x2fc>
 80059b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80059bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d005      	beq.n	80059d4 <create_name+0x314>
 80059c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d105      	bne.n	80059e0 <create_name+0x320>
 80059d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80059e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d117      	bne.n	8005a1c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80059ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d105      	bne.n	8005a04 <create_name+0x344>
 80059f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fc:	f043 0310 	orr.w	r3, r3, #16
 8005a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d105      	bne.n	8005a1c <create_name+0x35c>
 8005a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005a26:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a44:	e002      	b.n	8005a4c <follow_path+0x1c>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b2f      	cmp	r3, #47	; 0x2f
 8005a52:	d0f8      	beq.n	8005a46 <follow_path+0x16>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b5c      	cmp	r3, #92	; 0x5c
 8005a5a:	d0f4      	beq.n	8005a46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b1f      	cmp	r3, #31
 8005a68:	d80a      	bhi.n	8005a80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2280      	movs	r2, #128	; 0x80
 8005a6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005a72:	2100      	movs	r1, #0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f8fd 	bl	8004c74 <dir_sdi>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e048      	b.n	8005b12 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a80:	463b      	mov	r3, r7
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fe1b 	bl	80056c0 <create_name>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d139      	bne.n	8005b08 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fc5a 	bl	800534e <dir_find>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005aa4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d12c      	bne.n	8005b0c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d127      	bne.n	8005b0c <follow_path+0xdc>
 8005abc:	2305      	movs	r3, #5
 8005abe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ac0:	e024      	b.n	8005b0c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d121      	bne.n	8005b10 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	799b      	ldrb	r3, [r3, #6]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ad8:	2305      	movs	r3, #5
 8005ada:	75fb      	strb	r3, [r7, #23]
 8005adc:	e019      	b.n	8005b12 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	8992      	ldrh	r2, [r2, #12]
 8005aec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005af0:	fb00 f202 	mul.w	r2, r0, r2
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fa60 	bl	8004fc0 <ld_clust>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b06:	e7bb      	b.n	8005a80 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <follow_path+0xe2>
				break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b10:	bf00      	nop
			}
		}
	}

	return res;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d031      	beq.n	8005b96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e002      	b.n	8005b40 <get_ldnumber+0x24>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b1f      	cmp	r3, #31
 8005b46:	d903      	bls.n	8005b50 <get_ldnumber+0x34>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b3a      	cmp	r3, #58	; 0x3a
 8005b4e:	d1f4      	bne.n	8005b3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b3a      	cmp	r3, #58	; 0x3a
 8005b56:	d11c      	bne.n	8005b92 <get_ldnumber+0x76>
			tp = *path;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	3b30      	subs	r3, #48	; 0x30
 8005b68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d80e      	bhi.n	8005b8e <get_ldnumber+0x72>
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d10a      	bne.n	8005b8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d107      	bne.n	8005b8e <get_ldnumber+0x72>
					vol = (int)i;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	e002      	b.n	8005b98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005b96:	693b      	ldr	r3, [r7, #16]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	70da      	strb	r2, [r3, #3]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe fc76 	bl	80044b0 <move_window>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <check_fs+0x2a>
 8005bca:	2304      	movs	r3, #4
 8005bcc:	e038      	b.n	8005c40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe f9ba 	bl	8003f50 <ld_word>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	461a      	mov	r2, r3
 8005be0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <check_fs+0x48>
 8005be8:	2303      	movs	r3, #3
 8005bea:	e029      	b.n	8005c40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf2:	2be9      	cmp	r3, #233	; 0xe9
 8005bf4:	d009      	beq.n	8005c0a <check_fs+0x66>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bfc:	2beb      	cmp	r3, #235	; 0xeb
 8005bfe:	d11e      	bne.n	8005c3e <check_fs+0x9a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c06:	2b90      	cmp	r3, #144	; 0x90
 8005c08:	d119      	bne.n	8005c3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3338      	adds	r3, #56	; 0x38
 8005c0e:	3336      	adds	r3, #54	; 0x36
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe f9b5 	bl	8003f80 <ld_dword>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <check_fs+0xa4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <check_fs+0x82>
 8005c22:	2300      	movs	r3, #0
 8005c24:	e00c      	b.n	8005c40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3338      	adds	r3, #56	; 0x38
 8005c2a:	3352      	adds	r3, #82	; 0x52
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9a7 	bl	8003f80 <ld_dword>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <check_fs+0xa8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <check_fs+0x9a>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c3e:	2302      	movs	r3, #2
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00544146 	.word	0x00544146
 8005c4c:	33544146 	.word	0x33544146

08005c50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b096      	sub	sp, #88	; 0x58
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff ff59 	bl	8005b1c <get_ldnumber>
 8005c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da01      	bge.n	8005c76 <find_volume+0x26>
 8005c72:	230b      	movs	r3, #11
 8005c74:	e265      	b.n	8006142 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c76:	4a9f      	ldr	r2, [pc, #636]	; (8005ef4 <find_volume+0x2a4>)
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <find_volume+0x3a>
 8005c86:	230c      	movs	r3, #12
 8005c88:	e25b      	b.n	8006142 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01a      	beq.n	8005cd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe f8b5 	bl	8003e14 <disk_status>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <find_volume+0x82>
 8005cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e237      	b.n	8006142 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e235      	b.n	8006142 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe f8ad 	bl	8003e48 <disk_initialize>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d00:	2303      	movs	r3, #3
 8005d02:	e21e      	b.n	8006142 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <find_volume+0xca>
 8005d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d16:	230a      	movs	r3, #10
 8005d18:	e213      	b.n	8006142 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	7858      	ldrb	r0, [r3, #1]
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	330c      	adds	r3, #12
 8005d22:	461a      	mov	r2, r3
 8005d24:	2102      	movs	r1, #2
 8005d26:	f7fe f8f5 	bl	8003f14 <disk_ioctl>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <find_volume+0xe4>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e206      	b.n	8006142 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	899b      	ldrh	r3, [r3, #12]
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d80d      	bhi.n	8005d5a <find_volume+0x10a>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	899b      	ldrh	r3, [r3, #12]
 8005d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d46:	d308      	bcc.n	8005d5a <find_volume+0x10a>
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	899b      	ldrh	r3, [r3, #12]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	899b      	ldrh	r3, [r3, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <find_volume+0x10e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1f1      	b.n	8006142 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d66:	f7ff ff1d 	bl	8005ba4 <check_fs>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d149      	bne.n	8005e0c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7c:	e01e      	b.n	8005dbc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d8c:	4413      	add	r3, r2
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	3304      	adds	r3, #4
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <find_volume+0x158>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe f8ee 	bl	8003f80 <ld_dword>
 8005da4:	4602      	mov	r2, r0
 8005da6:	e000      	b.n	8005daa <find_volume+0x15a>
 8005da8:	2200      	movs	r2, #0
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3358      	adds	r3, #88	; 0x58
 8005db0:	443b      	add	r3, r7
 8005db2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db8:	3301      	adds	r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d9dd      	bls.n	8005d7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <find_volume+0x182>
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	3358      	adds	r3, #88	; 0x58
 8005dd8:	443b      	add	r3, r7
 8005dda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005dde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <find_volume+0x1a2>
 8005de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dea:	f7ff fedb 	bl	8005ba4 <check_fs>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e000      	b.n	8005df4 <find_volume+0x1a4>
 8005df2:	2303      	movs	r3, #3
 8005df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d905      	bls.n	8005e0c <find_volume+0x1bc>
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	3301      	adds	r3, #1
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d9e2      	bls.n	8005dd2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d101      	bne.n	8005e18 <find_volume+0x1c8>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e194      	b.n	8006142 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d901      	bls.n	8005e24 <find_volume+0x1d4>
 8005e20:	230d      	movs	r3, #13
 8005e22:	e18e      	b.n	8006142 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	3338      	adds	r3, #56	; 0x38
 8005e28:	330b      	adds	r3, #11
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe f890 	bl	8003f50 <ld_word>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	899b      	ldrh	r3, [r3, #12]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <find_volume+0x1f0>
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	e180      	b.n	8006142 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	3338      	adds	r3, #56	; 0x38
 8005e44:	3316      	adds	r3, #22
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe f882 	bl	8003f50 <ld_word>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <find_volume+0x214>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	3338      	adds	r3, #56	; 0x38
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe f88f 	bl	8003f80 <ld_dword>
 8005e62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	789b      	ldrb	r3, [r3, #2]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d005      	beq.n	8005e88 <find_volume+0x238>
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d001      	beq.n	8005e88 <find_volume+0x238>
 8005e84:	230d      	movs	r3, #13
 8005e86:	e15c      	b.n	8006142 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <find_volume+0x26c>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	895b      	ldrh	r3, [r3, #10]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	895b      	ldrh	r3, [r3, #10]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <find_volume+0x270>
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	e140      	b.n	8006142 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	3311      	adds	r3, #17
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f842 	bl	8003f50 <ld_word>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	891b      	ldrh	r3, [r3, #8]
 8005ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eda:	8992      	ldrh	r2, [r2, #12]
 8005edc:	0952      	lsrs	r2, r2, #5
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee4:	fb01 f202 	mul.w	r2, r1, r2
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <find_volume+0x2a8>
 8005ef0:	230d      	movs	r3, #13
 8005ef2:	e126      	b.n	8006142 <find_volume+0x4f2>
 8005ef4:	20000254 	.word	0x20000254

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	3338      	adds	r3, #56	; 0x38
 8005efc:	3313      	adds	r3, #19
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe f826 	bl	8003f50 <ld_word>
 8005f04:	4603      	mov	r3, r0
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <find_volume+0x2cc>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	3338      	adds	r3, #56	; 0x38
 8005f12:	3320      	adds	r3, #32
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe f833 	bl	8003f80 <ld_dword>
 8005f1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	3338      	adds	r3, #56	; 0x38
 8005f20:	330e      	adds	r3, #14
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe f814 	bl	8003f50 <ld_word>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <find_volume+0x2e6>
 8005f32:	230d      	movs	r3, #13
 8005f34:	e105      	b.n	8006142 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	4413      	add	r3, r2
 8005f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3e:	8911      	ldrh	r1, [r2, #8]
 8005f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f42:	8992      	ldrh	r2, [r2, #12]
 8005f44:	0952      	lsrs	r2, r2, #5
 8005f46:	b292      	uxth	r2, r2
 8005f48:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	4413      	add	r3, r2
 8005f50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d201      	bcs.n	8005f5e <find_volume+0x30e>
 8005f5a:	230d      	movs	r3, #13
 8005f5c:	e0f1      	b.n	8006142 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f66:	8952      	ldrh	r2, [r2, #10]
 8005f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <find_volume+0x328>
 8005f74:	230d      	movs	r3, #13
 8005f76:	e0e4      	b.n	8006142 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d802      	bhi.n	8005f8e <find_volume+0x33e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d802      	bhi.n	8005f9e <find_volume+0x34e>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	441a      	add	r2, r3
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	441a      	add	r2, r3
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d11e      	bne.n	8006006 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	332a      	adds	r3, #42	; 0x2a
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd ffbe 	bl	8003f50 <ld_word>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <find_volume+0x38e>
 8005fda:	230d      	movs	r3, #13
 8005fdc:	e0b1      	b.n	8006142 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	891b      	ldrh	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <find_volume+0x39a>
 8005fe6:	230d      	movs	r3, #13
 8005fe8:	e0ab      	b.n	8006142 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	3338      	adds	r3, #56	; 0x38
 8005fee:	332c      	adds	r3, #44	; 0x2c
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd ffc5 	bl	8003f80 <ld_dword>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
 8006004:	e01f      	b.n	8006046 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	891b      	ldrh	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <find_volume+0x3c2>
 800600e:	230d      	movs	r3, #13
 8006010:	e097      	b.n	8006142 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006018:	441a      	add	r2, r3
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800601e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <find_volume+0x3de>
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	e00a      	b.n	8006044 <find_volume+0x3f4>
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	085a      	lsrs	r2, r3, #1
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	899b      	ldrh	r3, [r3, #12]
 800604e:	4619      	mov	r1, r3
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006052:	440b      	add	r3, r1
 8006054:	3b01      	subs	r3, #1
 8006056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006058:	8989      	ldrh	r1, [r1, #12]
 800605a:	fbb3 f3f1 	udiv	r3, r3, r1
 800605e:	429a      	cmp	r2, r3
 8006060:	d201      	bcs.n	8006066 <find_volume+0x416>
 8006062:	230d      	movs	r3, #13
 8006064:	e06d      	b.n	8006142 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	619a      	str	r2, [r3, #24]
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800607c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006080:	2b03      	cmp	r3, #3
 8006082:	d149      	bne.n	8006118 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	3338      	adds	r3, #56	; 0x38
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd ff60 	bl	8003f50 <ld_word>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d140      	bne.n	8006118 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	3301      	adds	r3, #1
 800609a:	4619      	mov	r1, r3
 800609c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800609e:	f7fe fa07 	bl	80044b0 <move_window>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d137      	bne.n	8006118 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	2200      	movs	r2, #0
 80060ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	3338      	adds	r3, #56	; 0x38
 80060b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd ff4a 	bl	8003f50 <ld_word>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d127      	bne.n	8006118 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	3338      	adds	r3, #56	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd ff57 	bl	8003f80 <ld_dword>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <find_volume+0x4fc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d11e      	bne.n	8006118 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	3338      	adds	r3, #56	; 0x38
 80060de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fd ff4c 	bl	8003f80 <ld_dword>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <find_volume+0x500>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d113      	bne.n	8006118 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	3338      	adds	r3, #56	; 0x38
 80060f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fd ff41 	bl	8003f80 <ld_dword>
 80060fe:	4602      	mov	r2, r0
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd ff37 	bl	8003f80 <ld_dword>
 8006112:	4602      	mov	r2, r0
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800611e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <find_volume+0x504>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <find_volume+0x504>)
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <find_volume+0x504>)
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	4a08      	ldr	r2, [pc, #32]	; (8006158 <find_volume+0x508>)
 8006138:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800613a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800613c:	f7fe f950 	bl	80043e0 <clear_lock>
#endif
	return FR_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3758      	adds	r7, #88	; 0x58
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	41615252 	.word	0x41615252
 8006150:	61417272 	.word	0x61417272
 8006154:	20000258 	.word	0x20000258
 8006158:	2000027c 	.word	0x2000027c

0800615c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006166:	2309      	movs	r3, #9
 8006168:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01c      	beq.n	80061aa <validate+0x4e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d018      	beq.n	80061aa <validate+0x4e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <validate+0x4e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	889a      	ldrh	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	88db      	ldrh	r3, [r3, #6]
 800618c:	429a      	cmp	r2, r3
 800618e:	d10c      	bne.n	80061aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fe3c 	bl	8003e14 <disk_status>
 800619c:	4603      	mov	r3, r0
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <validate+0x4e>
			res = FR_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <validate+0x5a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	e000      	b.n	80061b8 <validate+0x5c>
 80061b6:	2300      	movs	r3, #0
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6013      	str	r3, [r2, #0]
	return res;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fc9c 	bl	8005b1c <get_ldnumber>
 80061e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da01      	bge.n	80061f0 <f_mount+0x28>
 80061ec:	230b      	movs	r3, #11
 80061ee:	e02b      	b.n	8006248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061f0:	4a17      	ldr	r2, [pc, #92]	; (8006250 <f_mount+0x88>)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006200:	69b8      	ldr	r0, [r7, #24]
 8006202:	f7fe f8ed 	bl	80043e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	490d      	ldr	r1, [pc, #52]	; (8006250 <f_mount+0x88>)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <f_mount+0x66>
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d001      	beq.n	8006232 <f_mount+0x6a>
 800622e:	2300      	movs	r3, #0
 8006230:	e00a      	b.n	8006248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006232:	f107 010c 	add.w	r1, r7, #12
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	2200      	movs	r2, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fd07 	bl	8005c50 <find_volume>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000254 	.word	0x20000254

08006254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b09a      	sub	sp, #104	; 0x68
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <f_open+0x18>
 8006268:	2309      	movs	r3, #9
 800626a:	e1bb      	b.n	80065e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006272:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	f107 0114 	add.w	r1, r7, #20
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fce6 	bl	8005c50 <find_volume>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800628a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 819f 	bne.w	80065d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	f107 0318 	add.w	r3, r7, #24
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fbc5 	bl	8005a30 <follow_path>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d11a      	bne.n	80062ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80062b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da03      	bge.n	80062c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80062be:	2306      	movs	r3, #6
 80062c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80062c4:	e011      	b.n	80062ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	f107 0318 	add.w	r3, r7, #24
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd ff36 	bl	8004150 <chk_lock>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	f003 031c 	and.w	r3, r3, #28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d07f      	beq.n	80063f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80062f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80062fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006300:	2b04      	cmp	r3, #4
 8006302:	d10e      	bne.n	8006322 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006304:	f7fd ff80 	bl	8004208 <enq_lock>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <f_open+0xc8>
 800630e:	f107 0318 	add.w	r3, r7, #24
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f8dc 	bl	80054d0 <dir_register>
 8006318:	4603      	mov	r3, r0
 800631a:	e000      	b.n	800631e <f_open+0xca>
 800631c:	2312      	movs	r3, #18
 800631e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	71fb      	strb	r3, [r7, #7]
 800632a:	e010      	b.n	800634e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800632c:	7fbb      	ldrb	r3, [r7, #30]
 800632e:	f003 0311 	and.w	r3, r3, #17
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <f_open+0xea>
					res = FR_DENIED;
 8006336:	2307      	movs	r3, #7
 8006338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800633c:	e007      	b.n	800634e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <f_open+0xfa>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800634e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006352:	2b00      	cmp	r3, #0
 8006354:	d168      	bne.n	8006428 <f_open+0x1d4>
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d063      	beq.n	8006428 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006360:	f7fd f834 	bl	80033cc <get_fattime>
 8006364:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	330e      	adds	r3, #14
 800636a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800636c:	4618      	mov	r0, r3
 800636e:	f7fd fe45 	bl	8003ffc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	3316      	adds	r3, #22
 8006376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006378:	4618      	mov	r0, r3
 800637a:	f7fd fe3f 	bl	8003ffc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	330b      	adds	r3, #11
 8006382:	2220      	movs	r2, #32
 8006384:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe17 	bl	8004fc0 <ld_clust>
 8006392:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006398:	2200      	movs	r2, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fe2f 	bl	8004ffe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	331c      	adds	r3, #28
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd fe28 	bl	8003ffc <st_dword>
					fs->wflag = 1;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2201      	movs	r2, #1
 80063b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d037      	beq.n	8006428 <f_open+0x1d4>
						dw = fs->winsect;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	2200      	movs	r2, #0
 80063c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fb1f 	bl	8004a0a <remove_chain>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80063d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d126      	bne.n	8006428 <f_open+0x1d4>
							res = move_window(fs, dw);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe f866 	bl	80044b0 <move_window>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ee:	3a01      	subs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]
 80063f2:	e019      	b.n	8006428 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80063f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80063fc:	7fbb      	ldrb	r3, [r7, #30]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006406:	2304      	movs	r3, #4
 8006408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800640c:	e00c      	b.n	8006428 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <f_open+0x1d4>
 8006418:	7fbb      	ldrb	r3, [r7, #30]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <f_open+0x1d4>
						res = FR_DENIED;
 8006422:	2307      	movs	r3, #7
 8006424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800642c:	2b00      	cmp	r3, #0
 800642e:	d128      	bne.n	8006482 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006440:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800644a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	f107 0318 	add.w	r3, r7, #24
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd feef 	bl	800424c <inc_lock>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <f_open+0x22e>
 800647c:	2302      	movs	r3, #2
 800647e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 80a3 	bne.w	80065d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fd94 	bl	8004fc0 <ld_clust>
 8006498:	4602      	mov	r2, r0
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	331c      	adds	r3, #28
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fd6c 	bl	8003f80 <ld_dword>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	88da      	ldrh	r2, [r3, #6]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	79fa      	ldrb	r2, [r7, #7]
 80064c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3330      	adds	r3, #48	; 0x30
 80064de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fdd6 	bl	8004096 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d06e      	beq.n	80065d2 <f_open+0x37e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d06a      	beq.n	80065d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	895b      	ldrh	r3, [r3, #10]
 8006508:	461a      	mov	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	899b      	ldrh	r3, [r3, #12]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006520:	e016      	b.n	8006550 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe f87f 	bl	800462a <get_fat>
 800652c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800652e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006530:	2b01      	cmp	r3, #1
 8006532:	d802      	bhi.n	800653a <f_open+0x2e6>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800653a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d102      	bne.n	8006548 <f_open+0x2f4>
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <f_open+0x30c>
 8006558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800655a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655c:	429a      	cmp	r2, r3
 800655e:	d8e0      	bhi.n	8006522 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006564:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800656a:	2b00      	cmp	r3, #0
 800656c:	d131      	bne.n	80065d2 <f_open+0x37e>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	899b      	ldrh	r3, [r3, #12]
 8006572:	461a      	mov	r2, r3
 8006574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006576:	fbb3 f1f2 	udiv	r1, r3, r2
 800657a:	fb01 f202 	mul.w	r2, r1, r2
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d026      	beq.n	80065d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f82f 	bl	80045ec <clust2sect>
 800658e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <f_open+0x34a>
						res = FR_INT_ERR;
 8006596:	2302      	movs	r3, #2
 8006598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800659c:	e019      	b.n	80065d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	899b      	ldrh	r3, [r3, #12]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	441a      	add	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	7858      	ldrb	r0, [r3, #1]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	2301      	movs	r3, #1
 80065c2:	f7fd fc67 	bl	8003e94 <disk_read>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <f_open+0x37e>
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80065d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <f_open+0x38c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3768      	adds	r7, #104	; 0x68
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f107 0214 	add.w	r2, r7, #20
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fda5 	bl	800615c <validate>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <f_read+0x44>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7d5b      	ldrb	r3, [r3, #21]
 8006624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <f_read+0x4a>
 8006630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006634:	e135      	b.n	80068a2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	7d1b      	ldrb	r3, [r3, #20]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <f_read+0x5a>
 8006642:	2307      	movs	r3, #7
 8006644:	e12d      	b.n	80068a2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	429a      	cmp	r2, r3
 8006658:	f240 811e 	bls.w	8006898 <f_read+0x2ac>
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006660:	e11a      	b.n	8006898 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	8992      	ldrh	r2, [r2, #12]
 800666a:	fbb3 f1f2 	udiv	r1, r3, r2
 800666e:	fb01 f202 	mul.w	r2, r1, r2
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 80d5 	bne.w	8006824 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	8992      	ldrh	r2, [r2, #12]
 8006682:	fbb3 f3f2 	udiv	r3, r3, r2
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	8952      	ldrh	r2, [r2, #10]
 800668a:	3a01      	subs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12f      	bne.n	80066f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
 80066a4:	e013      	b.n	80066ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7fe faa5 	bl	8004c04 <clmt_clust>
 80066ba:	6338      	str	r0, [r7, #48]	; 0x30
 80066bc:	e007      	b.n	80066ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fd ffaf 	bl	800462a <get_fat>
 80066cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d804      	bhi.n	80066de <f_read+0xf2>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2202      	movs	r2, #2
 80066d8:	755a      	strb	r2, [r3, #21]
 80066da:	2302      	movs	r3, #2
 80066dc:	e0e1      	b.n	80068a2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d104      	bne.n	80066f0 <f_read+0x104>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	755a      	strb	r2, [r3, #21]
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0d8      	b.n	80068a2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f7fd ff74 	bl	80045ec <clust2sect>
 8006704:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <f_read+0x12a>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	755a      	strb	r2, [r3, #21]
 8006712:	2302      	movs	r3, #2
 8006714:	e0c5      	b.n	80068a2 <f_read+0x2b6>
			sect += csect;
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	899b      	ldrh	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	fbb3 f3f2 	udiv	r3, r3, r2
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d041      	beq.n	80067b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	4413      	add	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	8952      	ldrh	r2, [r2, #10]
 800673c:	4293      	cmp	r3, r2
 800673e:	d905      	bls.n	800674c <f_read+0x160>
					cc = fs->csize - csect;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	895b      	ldrh	r3, [r3, #10]
 8006744:	461a      	mov	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	7858      	ldrb	r0, [r3, #1]
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006756:	f7fd fb9d 	bl	8003e94 <disk_read>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <f_read+0x17e>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	755a      	strb	r2, [r3, #21]
 8006766:	2301      	movs	r3, #1
 8006768:	e09b      	b.n	80068a2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	7d1b      	ldrb	r3, [r3, #20]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da18      	bge.n	80067a6 <f_read+0x1ba>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677e:	429a      	cmp	r2, r3
 8006780:	d911      	bls.n	80067a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	8992      	ldrh	r2, [r2, #12]
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	18d0      	adds	r0, r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	899b      	ldrh	r3, [r3, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f7fd fc57 	bl	8004054 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	899b      	ldrh	r3, [r3, #12]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80067b4:	e05c      	b.n	8006870 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d02e      	beq.n	800681e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7d1b      	ldrb	r3, [r3, #20]
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da18      	bge.n	80067fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	7858      	ldrb	r0, [r3, #1]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	2301      	movs	r3, #1
 80067da:	f7fd fb7b 	bl	8003ed4 <disk_write>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <f_read+0x202>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	755a      	strb	r2, [r3, #21]
 80067ea:	2301      	movs	r3, #1
 80067ec:	e059      	b.n	80068a2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7d1b      	ldrb	r3, [r3, #20]
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	7858      	ldrb	r0, [r3, #1]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006806:	2301      	movs	r3, #1
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	f7fd fb43 	bl	8003e94 <disk_read>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <f_read+0x232>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	755a      	strb	r2, [r3, #21]
 800681a:	2301      	movs	r3, #1
 800681c:	e041      	b.n	80068a2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	899b      	ldrh	r3, [r3, #12]
 8006828:	4618      	mov	r0, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	8992      	ldrh	r2, [r2, #12]
 8006832:	fbb3 f1f2 	udiv	r1, r3, r2
 8006836:	fb01 f202 	mul.w	r2, r1, r2
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	1ac3      	subs	r3, r0, r3
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d901      	bls.n	800684c <f_read+0x260>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	8992      	ldrh	r2, [r2, #12]
 800685a:	fbb3 f0f2 	udiv	r0, r3, r2
 800685e:	fb00 f202 	mul.w	r2, r0, r2
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	440b      	add	r3, r1
 8006866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006868:	4619      	mov	r1, r3
 800686a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686c:	f7fd fbf2 	bl	8004054 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	4413      	add	r3, r2
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	441a      	add	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f47f aee1 	bne.w	8006662 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3738      	adds	r7, #56	; 0x38
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08c      	sub	sp, #48	; 0x30
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f107 0210 	add.w	r2, r7, #16
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fc46 	bl	800615c <validate>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <f_write+0x44>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	7d5b      	ldrb	r3, [r3, #21]
 80068e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80068e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <f_write+0x4a>
 80068ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f2:	e16a      	b.n	8006bca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	7d1b      	ldrb	r3, [r3, #20]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <f_write+0x5a>
 8006900:	2307      	movs	r3, #7
 8006902:	e162      	b.n	8006bca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	f080 814c 	bcs.w	8006bae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	43db      	mvns	r3, r3
 800691c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800691e:	e146      	b.n	8006bae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	8992      	ldrh	r2, [r2, #12]
 8006928:	fbb3 f1f2 	udiv	r1, r3, r2
 800692c:	fb01 f202 	mul.w	r2, r1, r2
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 80f1 	bne.w	8006b1a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	8992      	ldrh	r2, [r2, #12]
 8006940:	fbb3 f3f2 	udiv	r3, r3, r2
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	8952      	ldrh	r2, [r2, #10]
 8006948:	3a01      	subs	r2, #1
 800694a:	4013      	ands	r3, r2
 800694c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d143      	bne.n	80069dc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10c      	bne.n	8006976 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11a      	bne.n	800699e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe f8b1 	bl	8004ad4 <create_chain>
 8006972:	62b8      	str	r0, [r7, #40]	; 0x28
 8006974:	e013      	b.n	800699e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	4619      	mov	r1, r3
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7fe f93d 	bl	8004c04 <clmt_clust>
 800698a:	62b8      	str	r0, [r7, #40]	; 0x28
 800698c:	e007      	b.n	800699e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fe f89c 	bl	8004ad4 <create_chain>
 800699c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8109 	beq.w	8006bb8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d104      	bne.n	80069b6 <f_write+0x10c>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2202      	movs	r2, #2
 80069b0:	755a      	strb	r2, [r3, #21]
 80069b2:	2302      	movs	r3, #2
 80069b4:	e109      	b.n	8006bca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d104      	bne.n	80069c8 <f_write+0x11e>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	755a      	strb	r2, [r3, #21]
 80069c4:	2301      	movs	r3, #1
 80069c6:	e100      	b.n	8006bca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <f_write+0x132>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7d1b      	ldrb	r3, [r3, #20]
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da18      	bge.n	8006a18 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	7858      	ldrb	r0, [r3, #1]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	2301      	movs	r3, #1
 80069f6:	f7fd fa6d 	bl	8003ed4 <disk_write>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <f_write+0x160>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	755a      	strb	r2, [r3, #21]
 8006a06:	2301      	movs	r3, #1
 8006a08:	e0df      	b.n	8006bca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	7d1b      	ldrb	r3, [r3, #20]
 8006a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7fd fde3 	bl	80045ec <clust2sect>
 8006a26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <f_write+0x18e>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	755a      	strb	r2, [r3, #21]
 8006a34:	2302      	movs	r3, #2
 8006a36:	e0c8      	b.n	8006bca <f_write+0x320>
			sect += csect;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	899b      	ldrh	r3, [r3, #12]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d043      	beq.n	8006adc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4413      	add	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	8952      	ldrh	r2, [r2, #10]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d905      	bls.n	8006a6e <f_write+0x1c4>
					cc = fs->csize - csect;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	461a      	mov	r2, r3
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	7858      	ldrb	r0, [r3, #1]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	69f9      	ldr	r1, [r7, #28]
 8006a78:	f7fd fa2c 	bl	8003ed4 <disk_write>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <f_write+0x1e2>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	755a      	strb	r2, [r3, #21]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09e      	b.n	8006bca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d918      	bls.n	8006acc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	8992      	ldrh	r2, [r2, #12]
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	18d1      	adds	r1, r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	899b      	ldrh	r3, [r3, #12]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f7fd facb 	bl	8004054 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	7d1b      	ldrb	r3, [r3, #20]
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	899b      	ldrh	r3, [r3, #12]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006ada:	e04b      	b.n	8006b74 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d016      	beq.n	8006b14 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d210      	bcs.n	8006b14 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	7858      	ldrb	r0, [r3, #1]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006afc:	2301      	movs	r3, #1
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	f7fd f9c8 	bl	8003e94 <disk_read>
 8006b04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	755a      	strb	r2, [r3, #21]
 8006b10:	2301      	movs	r3, #1
 8006b12:	e05a      	b.n	8006bca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	899b      	ldrh	r3, [r3, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	8992      	ldrh	r2, [r2, #12]
 8006b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2c:	fb01 f202 	mul.w	r2, r1, r2
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	1ac3      	subs	r3, r0, r3
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d901      	bls.n	8006b42 <f_write+0x298>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	8992      	ldrh	r2, [r2, #12]
 8006b50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b54:	fb00 f202 	mul.w	r2, r0, r2
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5e:	69f9      	ldr	r1, [r7, #28]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fd fa77 	bl	8004054 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7d1b      	ldrb	r3, [r3, #20]
 8006b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	4413      	add	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf38      	it	cc
 8006b94:	461a      	movcc	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	441a      	add	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f47f aeb5 	bne.w	8006920 <f_write+0x76>
 8006bb6:	e000      	b.n	8006bba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006bb8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7d1b      	ldrb	r3, [r3, #20]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f107 0208 	add.w	r2, r7, #8
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff faba 	bl	800615c <validate>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d168      	bne.n	8006cc4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7d1b      	ldrb	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d062      	beq.n	8006cc4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da15      	bge.n	8006c34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	7858      	ldrb	r0, [r3, #1]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	2301      	movs	r3, #1
 8006c18:	f7fd f95c 	bl	8003ed4 <disk_write>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <f_sync+0x54>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e04f      	b.n	8006cc6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7d1b      	ldrb	r3, [r3, #20]
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006c34:	f7fc fbca 	bl	80033cc <get_fattime>
 8006c38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fd fc34 	bl	80044b0 <move_window>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d138      	bne.n	8006cc4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	330b      	adds	r3, #11
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	330b      	adds	r3, #11
 8006c62:	f042 0220 	orr.w	r2, r2, #32
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	f7fe f9c2 	bl	8004ffe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f103 021c 	add.w	r2, r3, #28
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fd f9b8 	bl	8003ffc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3316      	adds	r3, #22
 8006c90:	6939      	ldr	r1, [r7, #16]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd f9b2 	bl	8003ffc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3312      	adds	r3, #18
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd f991 	bl	8003fc6 <st_word>
					fs->wflag = 1;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd fc2d 	bl	800450c <sync_fs>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7d1b      	ldrb	r3, [r3, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff7b 	bl	8006bd2 <f_sync>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f107 0208 	add.w	r2, r7, #8
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fa34 	bl	800615c <validate>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10c      	bne.n	8006d18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd fb30 	bl	8004368 <dec_lock>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b090      	sub	sp, #64	; 0x40
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f107 0208 	add.w	r2, r7, #8
 8006d32:	4611      	mov	r1, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fa11 	bl	800615c <validate>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <f_lseek+0x2e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7d5b      	ldrb	r3, [r3, #21]
 8006d4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <f_lseek+0x3c>
 8006d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d5c:	e201      	b.n	8007162 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80d9 	beq.w	8006f1a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d15a      	bne.n	8006e26 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	2302      	movs	r3, #2
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d03a      	beq.n	8006e06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	2300      	movs	r3, #0
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	3301      	adds	r3, #1
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fd fc3c 	bl	800462a <get_fat>
 8006db2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d804      	bhi.n	8006dc4 <f_lseek+0xa2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	755a      	strb	r2, [r3, #21]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e1ce      	b.n	8007162 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d104      	bne.n	8006dd6 <f_lseek+0xb4>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	755a      	strb	r2, [r3, #21]
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e1c5      	b.n	8007162 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d0de      	beq.n	8006d9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d809      	bhi.n	8006dfc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	627a      	str	r2, [r7, #36]	; 0x24
 8006dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	627a      	str	r2, [r7, #36]	; 0x24
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d3c4      	bcc.n	8006d90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d803      	bhi.n	8006e1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e19f      	b.n	800715e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006e1e:	2311      	movs	r3, #17
 8006e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006e24:	e19b      	b.n	800715e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <f_lseek+0x114>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 818d 	beq.w	800715e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fd feda 	bl	8004c04 <clmt_clust>
 8006e50:	4602      	mov	r2, r0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f7fd fbc4 	bl	80045ec <clust2sect>
 8006e64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <f_lseek+0x154>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	755a      	strb	r2, [r3, #21]
 8006e72:	2302      	movs	r3, #2
 8006e74:	e175      	b.n	8007162 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	8992      	ldrh	r2, [r2, #12]
 8006e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	8952      	ldrh	r2, [r2, #10]
 8006e86:	3a01      	subs	r2, #1
 8006e88:	4013      	ands	r3, r2
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	8992      	ldrh	r2, [r2, #12]
 8006e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e9c:	fb01 f202 	mul.w	r2, r1, r2
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 815b 	beq.w	800715e <f_lseek+0x43c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f000 8155 	beq.w	800715e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7d1b      	ldrb	r3, [r3, #20]
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da18      	bge.n	8006ef0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	7858      	ldrb	r0, [r3, #1]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f7fd f801 	bl	8003ed4 <disk_write>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <f_lseek+0x1c0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	755a      	strb	r2, [r3, #21]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e13f      	b.n	8007162 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7d1b      	ldrb	r3, [r3, #20]
 8006ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	7858      	ldrb	r0, [r3, #1]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006efa:	2301      	movs	r3, #1
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	f7fc ffc9 	bl	8003e94 <disk_read>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <f_lseek+0x1f0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	755a      	strb	r2, [r3, #21]
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e127      	b.n	8007162 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	621a      	str	r2, [r3, #32]
 8006f18:	e121      	b.n	800715e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d908      	bls.n	8006f36 <f_lseek+0x214>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f44:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80b5 	beq.w	80070b8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	895b      	ldrh	r3, [r3, #10]
 8006f52:	461a      	mov	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	899b      	ldrh	r3, [r3, #12]
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
 8006f5c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01b      	beq.n	8006f9c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1e5a      	subs	r2, r3, #1
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	1e59      	subs	r1, r3, #1
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d30f      	bcc.n	8006f9c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	1e5a      	subs	r2, r3, #1
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	425b      	negs	r3, r3
 8006f84:	401a      	ands	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f9a:	e022      	b.n	8006fe2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d119      	bne.n	8006fdc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd fd91 	bl	8004ad4 <create_chain>
 8006fb2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d104      	bne.n	8006fc4 <f_lseek+0x2a2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	755a      	strb	r2, [r3, #21]
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e0ce      	b.n	8007162 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d104      	bne.n	8006fd6 <f_lseek+0x2b4>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	755a      	strb	r2, [r3, #21]
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e0c5      	b.n	8007162 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fda:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d067      	beq.n	80070b8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006fe8:	e03a      	b.n	8007060 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	441a      	add	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7d1b      	ldrb	r3, [r3, #20]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd fd60 	bl	8004ad4 <create_chain>
 8007014:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <f_lseek+0x30c>
							ofs = 0; break;
 800701c:	2300      	movs	r3, #0
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	e022      	b.n	8007068 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd faff 	bl	800462a <get_fat>
 800702c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d104      	bne.n	8007040 <f_lseek+0x31e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	755a      	strb	r2, [r3, #21]
 800703c:	2301      	movs	r3, #1
 800703e:	e090      	b.n	8007162 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2b01      	cmp	r3, #1
 8007044:	d904      	bls.n	8007050 <f_lseek+0x32e>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704c:	429a      	cmp	r2, r3
 800704e:	d304      	bcc.n	800705a <f_lseek+0x338>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	755a      	strb	r2, [r3, #21]
 8007056:	2302      	movs	r3, #2
 8007058:	e083      	b.n	8007162 <f_lseek+0x440>
					fp->clust = clst;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	429a      	cmp	r2, r3
 8007066:	d8c0      	bhi.n	8006fea <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	899b      	ldrh	r3, [r3, #12]
 8007078:	461a      	mov	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007080:	fb01 f202 	mul.w	r2, r1, r2
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd faac 	bl	80045ec <clust2sect>
 8007094:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <f_lseek+0x384>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	755a      	strb	r2, [r3, #21]
 80070a2:	2302      	movs	r3, #2
 80070a4:	e05d      	b.n	8007162 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	899b      	ldrh	r3, [r3, #12]
 80070aa:	461a      	mov	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b4:	4413      	add	r3, r2
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699a      	ldr	r2, [r3, #24]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d90a      	bls.n	80070da <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7d1b      	ldrb	r3, [r3, #20]
 80070d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	8992      	ldrh	r2, [r2, #12]
 80070e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e6:	fb01 f202 	mul.w	r2, r1, r2
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d036      	beq.n	800715e <f_lseek+0x43c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d031      	beq.n	800715e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7d1b      	ldrb	r3, [r3, #20]
 80070fe:	b25b      	sxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	da18      	bge.n	8007136 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	7858      	ldrb	r0, [r3, #1]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	2301      	movs	r3, #1
 8007114:	f7fc fede 	bl	8003ed4 <disk_write>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <f_lseek+0x406>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	755a      	strb	r2, [r3, #21]
 8007124:	2301      	movs	r3, #1
 8007126:	e01c      	b.n	8007162 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	7d1b      	ldrb	r3, [r3, #20]
 800712c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007130:	b2da      	uxtb	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	7858      	ldrb	r0, [r3, #1]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007140:	2301      	movs	r3, #1
 8007142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007144:	f7fc fea6 	bl	8003e94 <disk_read>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <f_lseek+0x436>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	755a      	strb	r2, [r3, #21]
 8007154:	2301      	movs	r3, #1
 8007156:	e004      	b.n	8007162 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800715e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007162:	4618      	mov	r0, r3
 8007164:	3740      	adds	r7, #64	; 0x40
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b092      	sub	sp, #72	; 0x48
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007176:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	2200      	movs	r2, #0
 8007180:	4618      	mov	r0, r3
 8007182:	f7fe fd65 	bl	8005c50 <find_volume>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800718c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8099 	bne.w	80072c8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	699a      	ldr	r2, [r3, #24]
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	3b02      	subs	r3, #2
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d804      	bhi.n	80071b4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e089      	b.n	80072c8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d128      	bne.n	8007212 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80071c0:	2302      	movs	r3, #2
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fd fa2b 	bl	800462a <get_fat>
 80071d4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d103      	bne.n	80071e6 <f_getfree+0x7c>
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071e4:	e063      	b.n	80072ae <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d103      	bne.n	80071f4 <f_getfree+0x8a>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071f2:	e05c      	b.n	80072ae <f_getfree+0x144>
					if (stat == 0) nfree++;
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <f_getfree+0x96>
 80071fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fc:	3301      	adds	r3, #1
 80071fe:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	3301      	adds	r3, #1
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800720c:	429a      	cmp	r2, r3
 800720e:	d3db      	bcc.n	80071c8 <f_getfree+0x5e>
 8007210:	e04d      	b.n	80072ae <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
 8007222:	2300      	movs	r3, #0
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	2b00      	cmp	r3, #0
 800722a:	d113      	bne.n	8007254 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	63ba      	str	r2, [r7, #56]	; 0x38
 8007234:	4619      	mov	r1, r3
 8007236:	f7fd f93b 	bl	80044b0 <move_window>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007244:	2b00      	cmp	r3, #0
 8007246:	d131      	bne.n	80072ac <f_getfree+0x142>
							p = fs->win;
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	3338      	adds	r3, #56	; 0x38
 800724c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	899b      	ldrh	r3, [r3, #12]
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d10f      	bne.n	800727c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800725c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725e:	f7fc fe77 	bl	8003f50 <ld_word>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <f_getfree+0x104>
 8007268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726a:	3301      	adds	r3, #1
 800726c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	3302      	adds	r3, #2
 8007272:	633b      	str	r3, [r7, #48]	; 0x30
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	3b02      	subs	r3, #2
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
 800727a:	e010      	b.n	800729e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800727c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727e:	f7fc fe7f 	bl	8003f80 <ld_dword>
 8007282:	4603      	mov	r3, r0
 8007284:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <f_getfree+0x128>
 800728c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728e:	3301      	adds	r3, #1
 8007290:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	3304      	adds	r3, #4
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	3b04      	subs	r3, #4
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	3b01      	subs	r3, #1
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1bd      	bne.n	8007226 <f_getfree+0xbc>
 80072aa:	e000      	b.n	80072ae <f_getfree+0x144>
							if (res != FR_OK) break;
 80072ac:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	791a      	ldrb	r2, [r3, #4]
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80072c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3748      	adds	r7, #72	; 0x48
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
	int n = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80072e8:	e01b      	b.n	8007322 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	f107 0114 	add.w	r1, r7, #20
 80072f2:	2201      	movs	r2, #1
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff f979 	bl	80065ec <f_read>
		if (rc != 1) break;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d116      	bne.n	800732e <f_gets+0x5a>
		c = s[0];
 8007300:	7d3b      	ldrb	r3, [r7, #20]
 8007302:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b0d      	cmp	r3, #13
 8007308:	d100      	bne.n	800730c <f_gets+0x38>
 800730a:	e00a      	b.n	8007322 <f_gets+0x4e>
		*p++ = c;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	61ba      	str	r2, [r7, #24]
 8007312:	7dfa      	ldrb	r2, [r7, #23]
 8007314:	701a      	strb	r2, [r3, #0]
		n++;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3301      	adds	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	2b0a      	cmp	r3, #10
 8007320:	d007      	beq.n	8007332 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3b01      	subs	r3, #1
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	429a      	cmp	r2, r3
 800732a:	dbde      	blt.n	80072ea <f_gets+0x16>
 800732c:	e002      	b.n	8007334 <f_gets+0x60>
		if (rc != 1) break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007332:	bf00      	nop
	}
	*p = 0;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <f_gets+0x70>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e000      	b.n	8007346 <f_gets+0x72>
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	2b0a      	cmp	r3, #10
 800735e:	d103      	bne.n	8007368 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007360:	210d      	movs	r1, #13
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff fff3 	bl	800734e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	db25      	blt.n	80073c0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	60fa      	str	r2, [r7, #12]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b3c      	cmp	r3, #60	; 0x3c
 8007386:	dd12      	ble.n	80073ae <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f103 010c 	add.w	r1, r3, #12
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	f107 0308 	add.w	r3, r7, #8
 8007398:	f7ff fa87 	bl	80068aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d101      	bne.n	80073a8 <putc_bfd+0x5a>
 80073a4:	2300      	movs	r3, #0
 80073a6:	e001      	b.n	80073ac <putc_bfd+0x5e>
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
 80073be:	e000      	b.n	80073c2 <putc_bfd+0x74>
	if (i < 0) return;
 80073c0:	bf00      	nop
}
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db16      	blt.n	8007406 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 010c 	add.w	r1, r3, #12
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f107 030c 	add.w	r3, r7, #12
 80073ec:	f7ff fa5d 	bl	80068aa <f_write>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d107      	bne.n	8007406 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d102      	bne.n	8007406 <putc_flush+0x3e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	e001      	b.n	800740a <putc_flush+0x42>
	return EOF;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b096      	sub	sp, #88	; 0x58
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007446:	f107 030c 	add.w	r3, r7, #12
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff ffe0 	bl	8007412 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007452:	e009      	b.n	8007468 <f_puts+0x2c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	781a      	ldrb	r2, [r3, #0]
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff73 	bl	800734e <putc_bfd>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f1      	bne.n	8007454 <f_puts+0x18>
	return putc_flush(&pb);
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ffa7 	bl	80073c8 <putc_flush>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3758      	adds	r7, #88	; 0x58
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 800749c:	7a5b      	ldrb	r3, [r3, #9]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d131      	bne.n	8007508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80074a4:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074a6:	7a5b      	ldrb	r3, [r3, #9]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074ae:	2100      	movs	r1, #0
 80074b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074b2:	4b19      	ldr	r3, [pc, #100]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074b4:	7a5b      	ldrb	r3, [r3, #9]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4a17      	ldr	r2, [pc, #92]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074c4:	7a5b      	ldrb	r3, [r3, #9]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074cc:	4413      	add	r3, r2
 80074ce:	79fa      	ldrb	r2, [r7, #7]
 80074d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074d4:	7a5b      	ldrb	r3, [r3, #9]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	b2d1      	uxtb	r1, r2
 80074dc:	4a0e      	ldr	r2, [pc, #56]	; (8007518 <FATFS_LinkDriverEx+0x94>)
 80074de:	7251      	strb	r1, [r2, #9]
 80074e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	3330      	adds	r3, #48	; 0x30
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3301      	adds	r3, #1
 80074f0:	223a      	movs	r2, #58	; 0x3a
 80074f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3302      	adds	r3, #2
 80074f8:	222f      	movs	r2, #47	; 0x2f
 80074fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3303      	adds	r3, #3
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	2000047c 	.word	0x2000047c

0800751c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007526:	2200      	movs	r2, #0
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ffaa 	bl	8007484 <FATFS_LinkDriverEx>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	2b7f      	cmp	r3, #127	; 0x7f
 800754c:	d802      	bhi.n	8007554 <ff_convert+0x18>
		c = chr;
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	81fb      	strh	r3, [r7, #14]
 8007552:	e025      	b.n	80075a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	2bff      	cmp	r3, #255	; 0xff
 800755e:	d805      	bhi.n	800756c <ff_convert+0x30>
 8007560:	88fb      	ldrh	r3, [r7, #6]
 8007562:	3b80      	subs	r3, #128	; 0x80
 8007564:	4a12      	ldr	r2, [pc, #72]	; (80075b0 <ff_convert+0x74>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	e000      	b.n	800756e <ff_convert+0x32>
 800756c:	2300      	movs	r3, #0
 800756e:	81fb      	strh	r3, [r7, #14]
 8007570:	e016      	b.n	80075a0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007572:	2300      	movs	r3, #0
 8007574:	81fb      	strh	r3, [r7, #14]
 8007576:	e009      	b.n	800758c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007578:	89fb      	ldrh	r3, [r7, #14]
 800757a:	4a0d      	ldr	r2, [pc, #52]	; (80075b0 <ff_convert+0x74>)
 800757c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	429a      	cmp	r2, r3
 8007584:	d006      	beq.n	8007594 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007586:	89fb      	ldrh	r3, [r7, #14]
 8007588:	3301      	adds	r3, #1
 800758a:	81fb      	strh	r3, [r7, #14]
 800758c:	89fb      	ldrh	r3, [r7, #14]
 800758e:	2b7f      	cmp	r3, #127	; 0x7f
 8007590:	d9f2      	bls.n	8007578 <ff_convert+0x3c>
 8007592:	e000      	b.n	8007596 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007594:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007596:	89fb      	ldrh	r3, [r7, #14]
 8007598:	3380      	adds	r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	b2db      	uxtb	r3, r3
 800759e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80075a0:	89fb      	ldrh	r3, [r7, #14]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	08008478 	.word	0x08008478

080075b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d201      	bcs.n	80075ca <ff_wtoupper+0x16>
 80075c6:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <ff_wtoupper+0x10c>)
 80075c8:	e000      	b.n	80075cc <ff_wtoupper+0x18>
 80075ca:	4b3e      	ldr	r3, [pc, #248]	; (80076c4 <ff_wtoupper+0x110>)
 80075cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	1c9a      	adds	r2, r3, #2
 80075d2:	617a      	str	r2, [r7, #20]
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80075d8:	8a7b      	ldrh	r3, [r7, #18]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d068      	beq.n	80076b0 <ff_wtoupper+0xfc>
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	8a7b      	ldrh	r3, [r7, #18]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d364      	bcc.n	80076b0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	617a      	str	r2, [r7, #20]
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	823b      	strh	r3, [r7, #16]
 80075f0:	8a3b      	ldrh	r3, [r7, #16]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	81fb      	strh	r3, [r7, #14]
 80075f6:	8a3b      	ldrh	r3, [r7, #16]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	8a79      	ldrh	r1, [r7, #18]
 8007600:	8a3b      	ldrh	r3, [r7, #16]
 8007602:	440b      	add	r3, r1
 8007604:	429a      	cmp	r2, r3
 8007606:	da49      	bge.n	800769c <ff_wtoupper+0xe8>
			switch (cmd) {
 8007608:	89fb      	ldrh	r3, [r7, #14]
 800760a:	2b08      	cmp	r3, #8
 800760c:	d84f      	bhi.n	80076ae <ff_wtoupper+0xfa>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <ff_wtoupper+0x60>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007639 	.word	0x08007639
 8007618:	0800764b 	.word	0x0800764b
 800761c:	08007661 	.word	0x08007661
 8007620:	08007669 	.word	0x08007669
 8007624:	08007671 	.word	0x08007671
 8007628:	08007679 	.word	0x08007679
 800762c:	08007681 	.word	0x08007681
 8007630:	08007689 	.word	0x08007689
 8007634:	08007691 	.word	0x08007691
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	8a7b      	ldrh	r3, [r7, #18]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	80fb      	strh	r3, [r7, #6]
 8007648:	e027      	b.n	800769a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	8a7b      	ldrh	r3, [r7, #18]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	b29b      	uxth	r3, r3
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	80fb      	strh	r3, [r7, #6]
 800765e:	e01c      	b.n	800769a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	3b10      	subs	r3, #16
 8007664:	80fb      	strh	r3, [r7, #6]
 8007666:	e018      	b.n	800769a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	3b20      	subs	r3, #32
 800766c:	80fb      	strh	r3, [r7, #6]
 800766e:	e014      	b.n	800769a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	3b30      	subs	r3, #48	; 0x30
 8007674:	80fb      	strh	r3, [r7, #6]
 8007676:	e010      	b.n	800769a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	3b1a      	subs	r3, #26
 800767c:	80fb      	strh	r3, [r7, #6]
 800767e:	e00c      	b.n	800769a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	3308      	adds	r3, #8
 8007684:	80fb      	strh	r3, [r7, #6]
 8007686:	e008      	b.n	800769a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	3b50      	subs	r3, #80	; 0x50
 800768c:	80fb      	strh	r3, [r7, #6]
 800768e:	e004      	b.n	800769a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007696:	80fb      	strh	r3, [r7, #6]
 8007698:	bf00      	nop
			}
			break;
 800769a:	e008      	b.n	80076ae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d195      	bne.n	80075ce <ff_wtoupper+0x1a>
 80076a2:	8a3b      	ldrh	r3, [r7, #16]
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4413      	add	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80076ac:	e78f      	b.n	80075ce <ff_wtoupper+0x1a>
			break;
 80076ae:	bf00      	nop
	}

	return chr;
 80076b0:	88fb      	ldrh	r3, [r7, #6]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	08008578 	.word	0x08008578
 80076c4:	0800876c 	.word	0x0800876c

080076c8 <__errno>:
 80076c8:	4b01      	ldr	r3, [pc, #4]	; (80076d0 <__errno+0x8>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000024 	.word	0x20000024

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4d0d      	ldr	r5, [pc, #52]	; (800770c <__libc_init_array+0x38>)
 80076d8:	4c0d      	ldr	r4, [pc, #52]	; (8007710 <__libc_init_array+0x3c>)
 80076da:	1b64      	subs	r4, r4, r5
 80076dc:	10a4      	asrs	r4, r4, #2
 80076de:	2600      	movs	r6, #0
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	4d0b      	ldr	r5, [pc, #44]	; (8007714 <__libc_init_array+0x40>)
 80076e6:	4c0c      	ldr	r4, [pc, #48]	; (8007718 <__libc_init_array+0x44>)
 80076e8:	f000 fc8e 	bl	8008008 <_init>
 80076ec:	1b64      	subs	r4, r4, r5
 80076ee:	10a4      	asrs	r4, r4, #2
 80076f0:	2600      	movs	r6, #0
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fc:	4798      	blx	r3
 80076fe:	3601      	adds	r6, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	f855 3b04 	ldr.w	r3, [r5], #4
 8007706:	4798      	blx	r3
 8007708:	3601      	adds	r6, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	08008864 	.word	0x08008864
 8007710:	08008864 	.word	0x08008864
 8007714:	08008864 	.word	0x08008864
 8007718:	08008868 	.word	0x08008868

0800771c <memset>:
 800771c:	4402      	add	r2, r0
 800771e:	4603      	mov	r3, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	d100      	bne.n	8007726 <memset+0xa>
 8007724:	4770      	bx	lr
 8007726:	f803 1b01 	strb.w	r1, [r3], #1
 800772a:	e7f9      	b.n	8007720 <memset+0x4>

0800772c <siprintf>:
 800772c:	b40e      	push	{r1, r2, r3}
 800772e:	b500      	push	{lr}
 8007730:	b09c      	sub	sp, #112	; 0x70
 8007732:	ab1d      	add	r3, sp, #116	; 0x74
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	9006      	str	r0, [sp, #24]
 8007738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800773c:	4809      	ldr	r0, [pc, #36]	; (8007764 <siprintf+0x38>)
 800773e:	9107      	str	r1, [sp, #28]
 8007740:	9104      	str	r1, [sp, #16]
 8007742:	4909      	ldr	r1, [pc, #36]	; (8007768 <siprintf+0x3c>)
 8007744:	f853 2b04 	ldr.w	r2, [r3], #4
 8007748:	9105      	str	r1, [sp, #20]
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	a902      	add	r1, sp, #8
 8007750:	f000 f868 	bl	8007824 <_svfiprintf_r>
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	b01c      	add	sp, #112	; 0x70
 800775c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007760:	b003      	add	sp, #12
 8007762:	4770      	bx	lr
 8007764:	20000024 	.word	0x20000024
 8007768:	ffff0208 	.word	0xffff0208

0800776c <__ssputs_r>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	688e      	ldr	r6, [r1, #8]
 8007772:	429e      	cmp	r6, r3
 8007774:	4682      	mov	sl, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4690      	mov	r8, r2
 800777a:	461f      	mov	r7, r3
 800777c:	d838      	bhi.n	80077f0 <__ssputs_r+0x84>
 800777e:	898a      	ldrh	r2, [r1, #12]
 8007780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007784:	d032      	beq.n	80077ec <__ssputs_r+0x80>
 8007786:	6825      	ldr	r5, [r4, #0]
 8007788:	6909      	ldr	r1, [r1, #16]
 800778a:	eba5 0901 	sub.w	r9, r5, r1
 800778e:	6965      	ldr	r5, [r4, #20]
 8007790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007798:	3301      	adds	r3, #1
 800779a:	444b      	add	r3, r9
 800779c:	106d      	asrs	r5, r5, #1
 800779e:	429d      	cmp	r5, r3
 80077a0:	bf38      	it	cc
 80077a2:	461d      	movcc	r5, r3
 80077a4:	0553      	lsls	r3, r2, #21
 80077a6:	d531      	bpl.n	800780c <__ssputs_r+0xa0>
 80077a8:	4629      	mov	r1, r5
 80077aa:	f000 fb63 	bl	8007e74 <_malloc_r>
 80077ae:	4606      	mov	r6, r0
 80077b0:	b950      	cbnz	r0, 80077c8 <__ssputs_r+0x5c>
 80077b2:	230c      	movs	r3, #12
 80077b4:	f8ca 3000 	str.w	r3, [sl]
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	6921      	ldr	r1, [r4, #16]
 80077ca:	464a      	mov	r2, r9
 80077cc:	f000 fabe 	bl	8007d4c <memcpy>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	6126      	str	r6, [r4, #16]
 80077de:	6165      	str	r5, [r4, #20]
 80077e0:	444e      	add	r6, r9
 80077e2:	eba5 0509 	sub.w	r5, r5, r9
 80077e6:	6026      	str	r6, [r4, #0]
 80077e8:	60a5      	str	r5, [r4, #8]
 80077ea:	463e      	mov	r6, r7
 80077ec:	42be      	cmp	r6, r7
 80077ee:	d900      	bls.n	80077f2 <__ssputs_r+0x86>
 80077f0:	463e      	mov	r6, r7
 80077f2:	6820      	ldr	r0, [r4, #0]
 80077f4:	4632      	mov	r2, r6
 80077f6:	4641      	mov	r1, r8
 80077f8:	f000 fab6 	bl	8007d68 <memmove>
 80077fc:	68a3      	ldr	r3, [r4, #8]
 80077fe:	1b9b      	subs	r3, r3, r6
 8007800:	60a3      	str	r3, [r4, #8]
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	4433      	add	r3, r6
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	2000      	movs	r0, #0
 800780a:	e7db      	b.n	80077c4 <__ssputs_r+0x58>
 800780c:	462a      	mov	r2, r5
 800780e:	f000 fba5 	bl	8007f5c <_realloc_r>
 8007812:	4606      	mov	r6, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	d1e1      	bne.n	80077dc <__ssputs_r+0x70>
 8007818:	6921      	ldr	r1, [r4, #16]
 800781a:	4650      	mov	r0, sl
 800781c:	f000 fabe 	bl	8007d9c <_free_r>
 8007820:	e7c7      	b.n	80077b2 <__ssputs_r+0x46>
	...

08007824 <_svfiprintf_r>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	4698      	mov	r8, r3
 800782a:	898b      	ldrh	r3, [r1, #12]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	b09d      	sub	sp, #116	; 0x74
 8007830:	4607      	mov	r7, r0
 8007832:	460d      	mov	r5, r1
 8007834:	4614      	mov	r4, r2
 8007836:	d50e      	bpl.n	8007856 <_svfiprintf_r+0x32>
 8007838:	690b      	ldr	r3, [r1, #16]
 800783a:	b963      	cbnz	r3, 8007856 <_svfiprintf_r+0x32>
 800783c:	2140      	movs	r1, #64	; 0x40
 800783e:	f000 fb19 	bl	8007e74 <_malloc_r>
 8007842:	6028      	str	r0, [r5, #0]
 8007844:	6128      	str	r0, [r5, #16]
 8007846:	b920      	cbnz	r0, 8007852 <_svfiprintf_r+0x2e>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	e0d1      	b.n	80079f6 <_svfiprintf_r+0x1d2>
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	616b      	str	r3, [r5, #20]
 8007856:	2300      	movs	r3, #0
 8007858:	9309      	str	r3, [sp, #36]	; 0x24
 800785a:	2320      	movs	r3, #32
 800785c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007860:	f8cd 800c 	str.w	r8, [sp, #12]
 8007864:	2330      	movs	r3, #48	; 0x30
 8007866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a10 <_svfiprintf_r+0x1ec>
 800786a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800786e:	f04f 0901 	mov.w	r9, #1
 8007872:	4623      	mov	r3, r4
 8007874:	469a      	mov	sl, r3
 8007876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800787a:	b10a      	cbz	r2, 8007880 <_svfiprintf_r+0x5c>
 800787c:	2a25      	cmp	r2, #37	; 0x25
 800787e:	d1f9      	bne.n	8007874 <_svfiprintf_r+0x50>
 8007880:	ebba 0b04 	subs.w	fp, sl, r4
 8007884:	d00b      	beq.n	800789e <_svfiprintf_r+0x7a>
 8007886:	465b      	mov	r3, fp
 8007888:	4622      	mov	r2, r4
 800788a:	4629      	mov	r1, r5
 800788c:	4638      	mov	r0, r7
 800788e:	f7ff ff6d 	bl	800776c <__ssputs_r>
 8007892:	3001      	adds	r0, #1
 8007894:	f000 80aa 	beq.w	80079ec <_svfiprintf_r+0x1c8>
 8007898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800789a:	445a      	add	r2, fp
 800789c:	9209      	str	r2, [sp, #36]	; 0x24
 800789e:	f89a 3000 	ldrb.w	r3, [sl]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80a2 	beq.w	80079ec <_svfiprintf_r+0x1c8>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b2:	f10a 0a01 	add.w	sl, sl, #1
 80078b6:	9304      	str	r3, [sp, #16]
 80078b8:	9307      	str	r3, [sp, #28]
 80078ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078be:	931a      	str	r3, [sp, #104]	; 0x68
 80078c0:	4654      	mov	r4, sl
 80078c2:	2205      	movs	r2, #5
 80078c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c8:	4851      	ldr	r0, [pc, #324]	; (8007a10 <_svfiprintf_r+0x1ec>)
 80078ca:	f7f8 fc91 	bl	80001f0 <memchr>
 80078ce:	9a04      	ldr	r2, [sp, #16]
 80078d0:	b9d8      	cbnz	r0, 800790a <_svfiprintf_r+0xe6>
 80078d2:	06d0      	lsls	r0, r2, #27
 80078d4:	bf44      	itt	mi
 80078d6:	2320      	movmi	r3, #32
 80078d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078dc:	0711      	lsls	r1, r2, #28
 80078de:	bf44      	itt	mi
 80078e0:	232b      	movmi	r3, #43	; 0x2b
 80078e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ea:	2b2a      	cmp	r3, #42	; 0x2a
 80078ec:	d015      	beq.n	800791a <_svfiprintf_r+0xf6>
 80078ee:	9a07      	ldr	r2, [sp, #28]
 80078f0:	4654      	mov	r4, sl
 80078f2:	2000      	movs	r0, #0
 80078f4:	f04f 0c0a 	mov.w	ip, #10
 80078f8:	4621      	mov	r1, r4
 80078fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078fe:	3b30      	subs	r3, #48	; 0x30
 8007900:	2b09      	cmp	r3, #9
 8007902:	d94e      	bls.n	80079a2 <_svfiprintf_r+0x17e>
 8007904:	b1b0      	cbz	r0, 8007934 <_svfiprintf_r+0x110>
 8007906:	9207      	str	r2, [sp, #28]
 8007908:	e014      	b.n	8007934 <_svfiprintf_r+0x110>
 800790a:	eba0 0308 	sub.w	r3, r0, r8
 800790e:	fa09 f303 	lsl.w	r3, r9, r3
 8007912:	4313      	orrs	r3, r2
 8007914:	9304      	str	r3, [sp, #16]
 8007916:	46a2      	mov	sl, r4
 8007918:	e7d2      	b.n	80078c0 <_svfiprintf_r+0x9c>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	9103      	str	r1, [sp, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfbb      	ittet	lt
 8007926:	425b      	neglt	r3, r3
 8007928:	f042 0202 	orrlt.w	r2, r2, #2
 800792c:	9307      	strge	r3, [sp, #28]
 800792e:	9307      	strlt	r3, [sp, #28]
 8007930:	bfb8      	it	lt
 8007932:	9204      	strlt	r2, [sp, #16]
 8007934:	7823      	ldrb	r3, [r4, #0]
 8007936:	2b2e      	cmp	r3, #46	; 0x2e
 8007938:	d10c      	bne.n	8007954 <_svfiprintf_r+0x130>
 800793a:	7863      	ldrb	r3, [r4, #1]
 800793c:	2b2a      	cmp	r3, #42	; 0x2a
 800793e:	d135      	bne.n	80079ac <_svfiprintf_r+0x188>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	1d1a      	adds	r2, r3, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	9203      	str	r2, [sp, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfb8      	it	lt
 800794c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007950:	3402      	adds	r4, #2
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a20 <_svfiprintf_r+0x1fc>
 8007958:	7821      	ldrb	r1, [r4, #0]
 800795a:	2203      	movs	r2, #3
 800795c:	4650      	mov	r0, sl
 800795e:	f7f8 fc47 	bl	80001f0 <memchr>
 8007962:	b140      	cbz	r0, 8007976 <_svfiprintf_r+0x152>
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	eba0 000a 	sub.w	r0, r0, sl
 800796a:	fa03 f000 	lsl.w	r0, r3, r0
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	4303      	orrs	r3, r0
 8007972:	3401      	adds	r4, #1
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797a:	4826      	ldr	r0, [pc, #152]	; (8007a14 <_svfiprintf_r+0x1f0>)
 800797c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007980:	2206      	movs	r2, #6
 8007982:	f7f8 fc35 	bl	80001f0 <memchr>
 8007986:	2800      	cmp	r0, #0
 8007988:	d038      	beq.n	80079fc <_svfiprintf_r+0x1d8>
 800798a:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <_svfiprintf_r+0x1f4>)
 800798c:	bb1b      	cbnz	r3, 80079d6 <_svfiprintf_r+0x1b2>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	3307      	adds	r3, #7
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	3308      	adds	r3, #8
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799c:	4433      	add	r3, r6
 800799e:	9309      	str	r3, [sp, #36]	; 0x24
 80079a0:	e767      	b.n	8007872 <_svfiprintf_r+0x4e>
 80079a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a6:	460c      	mov	r4, r1
 80079a8:	2001      	movs	r0, #1
 80079aa:	e7a5      	b.n	80078f8 <_svfiprintf_r+0xd4>
 80079ac:	2300      	movs	r3, #0
 80079ae:	3401      	adds	r4, #1
 80079b0:	9305      	str	r3, [sp, #20]
 80079b2:	4619      	mov	r1, r3
 80079b4:	f04f 0c0a 	mov.w	ip, #10
 80079b8:	4620      	mov	r0, r4
 80079ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079be:	3a30      	subs	r2, #48	; 0x30
 80079c0:	2a09      	cmp	r2, #9
 80079c2:	d903      	bls.n	80079cc <_svfiprintf_r+0x1a8>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0c5      	beq.n	8007954 <_svfiprintf_r+0x130>
 80079c8:	9105      	str	r1, [sp, #20]
 80079ca:	e7c3      	b.n	8007954 <_svfiprintf_r+0x130>
 80079cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80079d0:	4604      	mov	r4, r0
 80079d2:	2301      	movs	r3, #1
 80079d4:	e7f0      	b.n	80079b8 <_svfiprintf_r+0x194>
 80079d6:	ab03      	add	r3, sp, #12
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	462a      	mov	r2, r5
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <_svfiprintf_r+0x1f8>)
 80079de:	a904      	add	r1, sp, #16
 80079e0:	4638      	mov	r0, r7
 80079e2:	f3af 8000 	nop.w
 80079e6:	1c42      	adds	r2, r0, #1
 80079e8:	4606      	mov	r6, r0
 80079ea:	d1d6      	bne.n	800799a <_svfiprintf_r+0x176>
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	065b      	lsls	r3, r3, #25
 80079f0:	f53f af2c 	bmi.w	800784c <_svfiprintf_r+0x28>
 80079f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f6:	b01d      	add	sp, #116	; 0x74
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	ab03      	add	r3, sp, #12
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	462a      	mov	r2, r5
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <_svfiprintf_r+0x1f8>)
 8007a04:	a904      	add	r1, sp, #16
 8007a06:	4638      	mov	r0, r7
 8007a08:	f000 f87a 	bl	8007b00 <_printf_i>
 8007a0c:	e7eb      	b.n	80079e6 <_svfiprintf_r+0x1c2>
 8007a0e:	bf00      	nop
 8007a10:	08008828 	.word	0x08008828
 8007a14:	08008832 	.word	0x08008832
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	0800776d 	.word	0x0800776d
 8007a20:	0800882e 	.word	0x0800882e

08007a24 <_printf_common>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	4616      	mov	r6, r2
 8007a2a:	4699      	mov	r9, r3
 8007a2c:	688a      	ldr	r2, [r1, #8]
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bfb8      	it	lt
 8007a38:	4613      	movlt	r3, r2
 8007a3a:	6033      	str	r3, [r6, #0]
 8007a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a40:	4607      	mov	r7, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	b10a      	cbz	r2, 8007a4a <_printf_common+0x26>
 8007a46:	3301      	adds	r3, #1
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	0699      	lsls	r1, r3, #26
 8007a4e:	bf42      	ittt	mi
 8007a50:	6833      	ldrmi	r3, [r6, #0]
 8007a52:	3302      	addmi	r3, #2
 8007a54:	6033      	strmi	r3, [r6, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	f015 0506 	ands.w	r5, r5, #6
 8007a5c:	d106      	bne.n	8007a6c <_printf_common+0x48>
 8007a5e:	f104 0a19 	add.w	sl, r4, #25
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	6832      	ldr	r2, [r6, #0]
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dc26      	bgt.n	8007aba <_printf_common+0x96>
 8007a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a70:	1e13      	subs	r3, r2, #0
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	bf18      	it	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	0692      	lsls	r2, r2, #26
 8007a7a:	d42b      	bmi.n	8007ad4 <_printf_common+0xb0>
 8007a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a80:	4649      	mov	r1, r9
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d01e      	beq.n	8007ac8 <_printf_common+0xa4>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	68e5      	ldr	r5, [r4, #12]
 8007a8e:	6832      	ldr	r2, [r6, #0]
 8007a90:	f003 0306 	and.w	r3, r3, #6
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	bf08      	it	eq
 8007a98:	1aad      	subeq	r5, r5, r2
 8007a9a:	68a3      	ldr	r3, [r4, #8]
 8007a9c:	6922      	ldr	r2, [r4, #16]
 8007a9e:	bf0c      	ite	eq
 8007aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa4:	2500      	movne	r5, #0
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	bfc4      	itt	gt
 8007aaa:	1a9b      	subgt	r3, r3, r2
 8007aac:	18ed      	addgt	r5, r5, r3
 8007aae:	2600      	movs	r6, #0
 8007ab0:	341a      	adds	r4, #26
 8007ab2:	42b5      	cmp	r5, r6
 8007ab4:	d11a      	bne.n	8007aec <_printf_common+0xc8>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e008      	b.n	8007acc <_printf_common+0xa8>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4652      	mov	r2, sl
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	47c0      	blx	r8
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d103      	bne.n	8007ad0 <_printf_common+0xac>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	e7c6      	b.n	8007a62 <_printf_common+0x3e>
 8007ad4:	18e1      	adds	r1, r4, r3
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	2030      	movs	r0, #48	; 0x30
 8007ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ade:	4422      	add	r2, r4
 8007ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ae8:	3302      	adds	r3, #2
 8007aea:	e7c7      	b.n	8007a7c <_printf_common+0x58>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4622      	mov	r2, r4
 8007af0:	4649      	mov	r1, r9
 8007af2:	4638      	mov	r0, r7
 8007af4:	47c0      	blx	r8
 8007af6:	3001      	adds	r0, #1
 8007af8:	d0e6      	beq.n	8007ac8 <_printf_common+0xa4>
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7d9      	b.n	8007ab2 <_printf_common+0x8e>
	...

08007b00 <_printf_i>:
 8007b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	7e0f      	ldrb	r7, [r1, #24]
 8007b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b08:	2f78      	cmp	r7, #120	; 0x78
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	469a      	mov	sl, r3
 8007b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b16:	d807      	bhi.n	8007b28 <_printf_i+0x28>
 8007b18:	2f62      	cmp	r7, #98	; 0x62
 8007b1a:	d80a      	bhi.n	8007b32 <_printf_i+0x32>
 8007b1c:	2f00      	cmp	r7, #0
 8007b1e:	f000 80d8 	beq.w	8007cd2 <_printf_i+0x1d2>
 8007b22:	2f58      	cmp	r7, #88	; 0x58
 8007b24:	f000 80a3 	beq.w	8007c6e <_printf_i+0x16e>
 8007b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b30:	e03a      	b.n	8007ba8 <_printf_i+0xa8>
 8007b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b36:	2b15      	cmp	r3, #21
 8007b38:	d8f6      	bhi.n	8007b28 <_printf_i+0x28>
 8007b3a:	a101      	add	r1, pc, #4	; (adr r1, 8007b40 <_printf_i+0x40>)
 8007b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007b29 	.word	0x08007b29
 8007b4c:	08007b29 	.word	0x08007b29
 8007b50:	08007b29 	.word	0x08007b29
 8007b54:	08007b29 	.word	0x08007b29
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007b29 	.word	0x08007b29
 8007b60:	08007b29 	.word	0x08007b29
 8007b64:	08007b29 	.word	0x08007b29
 8007b68:	08007b29 	.word	0x08007b29
 8007b6c:	08007cb9 	.word	0x08007cb9
 8007b70:	08007bdd 	.word	0x08007bdd
 8007b74:	08007c9b 	.word	0x08007c9b
 8007b78:	08007b29 	.word	0x08007b29
 8007b7c:	08007b29 	.word	0x08007b29
 8007b80:	08007cdb 	.word	0x08007cdb
 8007b84:	08007b29 	.word	0x08007b29
 8007b88:	08007bdd 	.word	0x08007bdd
 8007b8c:	08007b29 	.word	0x08007b29
 8007b90:	08007b29 	.word	0x08007b29
 8007b94:	08007ca3 	.word	0x08007ca3
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	1d1a      	adds	r2, r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	602a      	str	r2, [r5, #0]
 8007ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0a3      	b.n	8007cf4 <_printf_i+0x1f4>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	6829      	ldr	r1, [r5, #0]
 8007bb0:	0606      	lsls	r6, r0, #24
 8007bb2:	f101 0304 	add.w	r3, r1, #4
 8007bb6:	d50a      	bpl.n	8007bce <_printf_i+0xce>
 8007bb8:	680e      	ldr	r6, [r1, #0]
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	da03      	bge.n	8007bc8 <_printf_i+0xc8>
 8007bc0:	232d      	movs	r3, #45	; 0x2d
 8007bc2:	4276      	negs	r6, r6
 8007bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc8:	485e      	ldr	r0, [pc, #376]	; (8007d44 <_printf_i+0x244>)
 8007bca:	230a      	movs	r3, #10
 8007bcc:	e019      	b.n	8007c02 <_printf_i+0x102>
 8007bce:	680e      	ldr	r6, [r1, #0]
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bd6:	bf18      	it	ne
 8007bd8:	b236      	sxthne	r6, r6
 8007bda:	e7ef      	b.n	8007bbc <_printf_i+0xbc>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	1d19      	adds	r1, r3, #4
 8007be2:	6029      	str	r1, [r5, #0]
 8007be4:	0601      	lsls	r1, r0, #24
 8007be6:	d501      	bpl.n	8007bec <_printf_i+0xec>
 8007be8:	681e      	ldr	r6, [r3, #0]
 8007bea:	e002      	b.n	8007bf2 <_printf_i+0xf2>
 8007bec:	0646      	lsls	r6, r0, #25
 8007bee:	d5fb      	bpl.n	8007be8 <_printf_i+0xe8>
 8007bf0:	881e      	ldrh	r6, [r3, #0]
 8007bf2:	4854      	ldr	r0, [pc, #336]	; (8007d44 <_printf_i+0x244>)
 8007bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2308      	moveq	r3, #8
 8007bfa:	230a      	movne	r3, #10
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c02:	6865      	ldr	r5, [r4, #4]
 8007c04:	60a5      	str	r5, [r4, #8]
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	bfa2      	ittt	ge
 8007c0a:	6821      	ldrge	r1, [r4, #0]
 8007c0c:	f021 0104 	bicge.w	r1, r1, #4
 8007c10:	6021      	strge	r1, [r4, #0]
 8007c12:	b90e      	cbnz	r6, 8007c18 <_printf_i+0x118>
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	d04d      	beq.n	8007cb4 <_printf_i+0x1b4>
 8007c18:	4615      	mov	r5, r2
 8007c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c22:	5dc7      	ldrb	r7, [r0, r7]
 8007c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c28:	4637      	mov	r7, r6
 8007c2a:	42bb      	cmp	r3, r7
 8007c2c:	460e      	mov	r6, r1
 8007c2e:	d9f4      	bls.n	8007c1a <_printf_i+0x11a>
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d10b      	bne.n	8007c4c <_printf_i+0x14c>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	07de      	lsls	r6, r3, #31
 8007c38:	d508      	bpl.n	8007c4c <_printf_i+0x14c>
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	6861      	ldr	r1, [r4, #4]
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	bfde      	ittt	le
 8007c42:	2330      	movle	r3, #48	; 0x30
 8007c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c4c:	1b52      	subs	r2, r2, r5
 8007c4e:	6122      	str	r2, [r4, #16]
 8007c50:	f8cd a000 	str.w	sl, [sp]
 8007c54:	464b      	mov	r3, r9
 8007c56:	aa03      	add	r2, sp, #12
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7ff fee2 	bl	8007a24 <_printf_common>
 8007c60:	3001      	adds	r0, #1
 8007c62:	d14c      	bne.n	8007cfe <_printf_i+0x1fe>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	b004      	add	sp, #16
 8007c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6e:	4835      	ldr	r0, [pc, #212]	; (8007d44 <_printf_i+0x244>)
 8007c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c74:	6829      	ldr	r1, [r5, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c7c:	6029      	str	r1, [r5, #0]
 8007c7e:	061d      	lsls	r5, r3, #24
 8007c80:	d514      	bpl.n	8007cac <_printf_i+0x1ac>
 8007c82:	07df      	lsls	r7, r3, #31
 8007c84:	bf44      	itt	mi
 8007c86:	f043 0320 	orrmi.w	r3, r3, #32
 8007c8a:	6023      	strmi	r3, [r4, #0]
 8007c8c:	b91e      	cbnz	r6, 8007c96 <_printf_i+0x196>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	f023 0320 	bic.w	r3, r3, #32
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	2310      	movs	r3, #16
 8007c98:	e7b0      	b.n	8007bfc <_printf_i+0xfc>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	f043 0320 	orr.w	r3, r3, #32
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	2378      	movs	r3, #120	; 0x78
 8007ca4:	4828      	ldr	r0, [pc, #160]	; (8007d48 <_printf_i+0x248>)
 8007ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007caa:	e7e3      	b.n	8007c74 <_printf_i+0x174>
 8007cac:	0659      	lsls	r1, r3, #25
 8007cae:	bf48      	it	mi
 8007cb0:	b2b6      	uxthmi	r6, r6
 8007cb2:	e7e6      	b.n	8007c82 <_printf_i+0x182>
 8007cb4:	4615      	mov	r5, r2
 8007cb6:	e7bb      	b.n	8007c30 <_printf_i+0x130>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	6826      	ldr	r6, [r4, #0]
 8007cbc:	6961      	ldr	r1, [r4, #20]
 8007cbe:	1d18      	adds	r0, r3, #4
 8007cc0:	6028      	str	r0, [r5, #0]
 8007cc2:	0635      	lsls	r5, r6, #24
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0x1cc>
 8007cc8:	6019      	str	r1, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0x1d2>
 8007ccc:	0670      	lsls	r0, r6, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0x1c8>
 8007cd0:	8019      	strh	r1, [r3, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	4615      	mov	r5, r2
 8007cd8:	e7ba      	b.n	8007c50 <_printf_i+0x150>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	1d1a      	adds	r2, r3, #4
 8007cde:	602a      	str	r2, [r5, #0]
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f7f8 fa82 	bl	80001f0 <memchr>
 8007cec:	b108      	cbz	r0, 8007cf2 <_printf_i+0x1f2>
 8007cee:	1b40      	subs	r0, r0, r5
 8007cf0:	6060      	str	r0, [r4, #4]
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfc:	e7a8      	b.n	8007c50 <_printf_i+0x150>
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	47d0      	blx	sl
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0ab      	beq.n	8007c64 <_printf_i+0x164>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	079b      	lsls	r3, r3, #30
 8007d10:	d413      	bmi.n	8007d3a <_printf_i+0x23a>
 8007d12:	68e0      	ldr	r0, [r4, #12]
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	4298      	cmp	r0, r3
 8007d18:	bfb8      	it	lt
 8007d1a:	4618      	movlt	r0, r3
 8007d1c:	e7a4      	b.n	8007c68 <_printf_i+0x168>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d09b      	beq.n	8007c64 <_printf_i+0x164>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	9903      	ldr	r1, [sp, #12]
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dcf2      	bgt.n	8007d1e <_printf_i+0x21e>
 8007d38:	e7eb      	b.n	8007d12 <_printf_i+0x212>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	f104 0619 	add.w	r6, r4, #25
 8007d40:	e7f5      	b.n	8007d2e <_printf_i+0x22e>
 8007d42:	bf00      	nop
 8007d44:	08008839 	.word	0x08008839
 8007d48:	0800884a 	.word	0x0800884a

08007d4c <memcpy>:
 8007d4c:	440a      	add	r2, r1
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d54:	d100      	bne.n	8007d58 <memcpy+0xc>
 8007d56:	4770      	bx	lr
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d62:	4291      	cmp	r1, r2
 8007d64:	d1f9      	bne.n	8007d5a <memcpy+0xe>
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <memmove>:
 8007d68:	4288      	cmp	r0, r1
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	eb01 0402 	add.w	r4, r1, r2
 8007d70:	d902      	bls.n	8007d78 <memmove+0x10>
 8007d72:	4284      	cmp	r4, r0
 8007d74:	4623      	mov	r3, r4
 8007d76:	d807      	bhi.n	8007d88 <memmove+0x20>
 8007d78:	1e43      	subs	r3, r0, #1
 8007d7a:	42a1      	cmp	r1, r4
 8007d7c:	d008      	beq.n	8007d90 <memmove+0x28>
 8007d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d86:	e7f8      	b.n	8007d7a <memmove+0x12>
 8007d88:	4402      	add	r2, r0
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	428a      	cmp	r2, r1
 8007d8e:	d100      	bne.n	8007d92 <memmove+0x2a>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d9a:	e7f7      	b.n	8007d8c <memmove+0x24>

08007d9c <_free_r>:
 8007d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d044      	beq.n	8007e2c <_free_r+0x90>
 8007da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da6:	9001      	str	r0, [sp, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f1a1 0404 	sub.w	r4, r1, #4
 8007dae:	bfb8      	it	lt
 8007db0:	18e4      	addlt	r4, r4, r3
 8007db2:	f000 f913 	bl	8007fdc <__malloc_lock>
 8007db6:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <_free_r+0x94>)
 8007db8:	9801      	ldr	r0, [sp, #4]
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	b933      	cbnz	r3, 8007dcc <_free_r+0x30>
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	b003      	add	sp, #12
 8007dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc8:	f000 b90e 	b.w	8007fe8 <__malloc_unlock>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x46>
 8007dd0:	6825      	ldr	r5, [r4, #0]
 8007dd2:	1961      	adds	r1, r4, r5
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf01      	itttt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	1949      	addeq	r1, r1, r5
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	e7ed      	b.n	8007dbe <_free_r+0x22>
 8007de2:	461a      	mov	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b10b      	cbz	r3, 8007dec <_free_r+0x50>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x46>
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	1855      	adds	r5, r2, r1
 8007df0:	42a5      	cmp	r5, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x70>
 8007df4:	6824      	ldr	r4, [r4, #0]
 8007df6:	4421      	add	r1, r4
 8007df8:	1854      	adds	r4, r2, r1
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	d1e0      	bne.n	8007dc2 <_free_r+0x26>
 8007e00:	681c      	ldr	r4, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	6053      	str	r3, [r2, #4]
 8007e06:	4421      	add	r1, r4
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	e7da      	b.n	8007dc2 <_free_r+0x26>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x78>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	6003      	str	r3, [r0, #0]
 8007e12:	e7d6      	b.n	8007dc2 <_free_r+0x26>
 8007e14:	6825      	ldr	r5, [r4, #0]
 8007e16:	1961      	adds	r1, r4, r5
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf04      	itt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	bf04      	itt	eq
 8007e24:	1949      	addeq	r1, r1, r5
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	6054      	str	r4, [r2, #4]
 8007e2a:	e7ca      	b.n	8007dc2 <_free_r+0x26>
 8007e2c:	b003      	add	sp, #12
 8007e2e:	bd30      	pop	{r4, r5, pc}
 8007e30:	20000488 	.word	0x20000488

08007e34 <sbrk_aligned>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4e0e      	ldr	r6, [pc, #56]	; (8007e70 <sbrk_aligned+0x3c>)
 8007e38:	460c      	mov	r4, r1
 8007e3a:	6831      	ldr	r1, [r6, #0]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	b911      	cbnz	r1, 8007e46 <sbrk_aligned+0x12>
 8007e40:	f000 f8bc 	bl	8007fbc <_sbrk_r>
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 f8b7 	bl	8007fbc <_sbrk_r>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d00a      	beq.n	8007e68 <sbrk_aligned+0x34>
 8007e52:	1cc4      	adds	r4, r0, #3
 8007e54:	f024 0403 	bic.w	r4, r4, #3
 8007e58:	42a0      	cmp	r0, r4
 8007e5a:	d007      	beq.n	8007e6c <sbrk_aligned+0x38>
 8007e5c:	1a21      	subs	r1, r4, r0
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f8ac 	bl	8007fbc <_sbrk_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d101      	bne.n	8007e6c <sbrk_aligned+0x38>
 8007e68:	f04f 34ff 	mov.w	r4, #4294967295
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	2000048c 	.word	0x2000048c

08007e74 <_malloc_r>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	1ccd      	adds	r5, r1, #3
 8007e7a:	f025 0503 	bic.w	r5, r5, #3
 8007e7e:	3508      	adds	r5, #8
 8007e80:	2d0c      	cmp	r5, #12
 8007e82:	bf38      	it	cc
 8007e84:	250c      	movcc	r5, #12
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	4607      	mov	r7, r0
 8007e8a:	db01      	blt.n	8007e90 <_malloc_r+0x1c>
 8007e8c:	42a9      	cmp	r1, r5
 8007e8e:	d905      	bls.n	8007e9c <_malloc_r+0x28>
 8007e90:	230c      	movs	r3, #12
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	2600      	movs	r6, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9c:	4e2e      	ldr	r6, [pc, #184]	; (8007f58 <_malloc_r+0xe4>)
 8007e9e:	f000 f89d 	bl	8007fdc <__malloc_lock>
 8007ea2:	6833      	ldr	r3, [r6, #0]
 8007ea4:	461c      	mov	r4, r3
 8007ea6:	bb34      	cbnz	r4, 8007ef6 <_malloc_r+0x82>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ffc2 	bl	8007e34 <sbrk_aligned>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	d14d      	bne.n	8007f52 <_malloc_r+0xde>
 8007eb6:	6834      	ldr	r4, [r6, #0]
 8007eb8:	4626      	mov	r6, r4
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d140      	bne.n	8007f40 <_malloc_r+0xcc>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	eb04 0803 	add.w	r8, r4, r3
 8007ec8:	f000 f878 	bl	8007fbc <_sbrk_r>
 8007ecc:	4580      	cmp	r8, r0
 8007ece:	d13a      	bne.n	8007f46 <_malloc_r+0xd2>
 8007ed0:	6821      	ldr	r1, [r4, #0]
 8007ed2:	3503      	adds	r5, #3
 8007ed4:	1a6d      	subs	r5, r5, r1
 8007ed6:	f025 0503 	bic.w	r5, r5, #3
 8007eda:	3508      	adds	r5, #8
 8007edc:	2d0c      	cmp	r5, #12
 8007ede:	bf38      	it	cc
 8007ee0:	250c      	movcc	r5, #12
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff ffa5 	bl	8007e34 <sbrk_aligned>
 8007eea:	3001      	adds	r0, #1
 8007eec:	d02b      	beq.n	8007f46 <_malloc_r+0xd2>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	442b      	add	r3, r5
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	e00e      	b.n	8007f14 <_malloc_r+0xa0>
 8007ef6:	6822      	ldr	r2, [r4, #0]
 8007ef8:	1b52      	subs	r2, r2, r5
 8007efa:	d41e      	bmi.n	8007f3a <_malloc_r+0xc6>
 8007efc:	2a0b      	cmp	r2, #11
 8007efe:	d916      	bls.n	8007f2e <_malloc_r+0xba>
 8007f00:	1961      	adds	r1, r4, r5
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	6025      	str	r5, [r4, #0]
 8007f06:	bf18      	it	ne
 8007f08:	6059      	strne	r1, [r3, #4]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	bf08      	it	eq
 8007f0e:	6031      	streq	r1, [r6, #0]
 8007f10:	5162      	str	r2, [r4, r5]
 8007f12:	604b      	str	r3, [r1, #4]
 8007f14:	4638      	mov	r0, r7
 8007f16:	f104 060b 	add.w	r6, r4, #11
 8007f1a:	f000 f865 	bl	8007fe8 <__malloc_unlock>
 8007f1e:	f026 0607 	bic.w	r6, r6, #7
 8007f22:	1d23      	adds	r3, r4, #4
 8007f24:	1af2      	subs	r2, r6, r3
 8007f26:	d0b6      	beq.n	8007e96 <_malloc_r+0x22>
 8007f28:	1b9b      	subs	r3, r3, r6
 8007f2a:	50a3      	str	r3, [r4, r2]
 8007f2c:	e7b3      	b.n	8007e96 <_malloc_r+0x22>
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	bf0c      	ite	eq
 8007f34:	6032      	streq	r2, [r6, #0]
 8007f36:	605a      	strne	r2, [r3, #4]
 8007f38:	e7ec      	b.n	8007f14 <_malloc_r+0xa0>
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	6864      	ldr	r4, [r4, #4]
 8007f3e:	e7b2      	b.n	8007ea6 <_malloc_r+0x32>
 8007f40:	4634      	mov	r4, r6
 8007f42:	6876      	ldr	r6, [r6, #4]
 8007f44:	e7b9      	b.n	8007eba <_malloc_r+0x46>
 8007f46:	230c      	movs	r3, #12
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f000 f84c 	bl	8007fe8 <__malloc_unlock>
 8007f50:	e7a1      	b.n	8007e96 <_malloc_r+0x22>
 8007f52:	6025      	str	r5, [r4, #0]
 8007f54:	e7de      	b.n	8007f14 <_malloc_r+0xa0>
 8007f56:	bf00      	nop
 8007f58:	20000488 	.word	0x20000488

08007f5c <_realloc_r>:
 8007f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f60:	4680      	mov	r8, r0
 8007f62:	4614      	mov	r4, r2
 8007f64:	460e      	mov	r6, r1
 8007f66:	b921      	cbnz	r1, 8007f72 <_realloc_r+0x16>
 8007f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	f7ff bf81 	b.w	8007e74 <_malloc_r>
 8007f72:	b92a      	cbnz	r2, 8007f80 <_realloc_r+0x24>
 8007f74:	f7ff ff12 	bl	8007d9c <_free_r>
 8007f78:	4625      	mov	r5, r4
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f80:	f000 f838 	bl	8007ff4 <_malloc_usable_size_r>
 8007f84:	4284      	cmp	r4, r0
 8007f86:	4607      	mov	r7, r0
 8007f88:	d802      	bhi.n	8007f90 <_realloc_r+0x34>
 8007f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f8e:	d812      	bhi.n	8007fb6 <_realloc_r+0x5a>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7ff ff6e 	bl	8007e74 <_malloc_r>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d0ed      	beq.n	8007f7a <_realloc_r+0x1e>
 8007f9e:	42bc      	cmp	r4, r7
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	bf28      	it	cs
 8007fa6:	463a      	movcs	r2, r7
 8007fa8:	f7ff fed0 	bl	8007d4c <memcpy>
 8007fac:	4631      	mov	r1, r6
 8007fae:	4640      	mov	r0, r8
 8007fb0:	f7ff fef4 	bl	8007d9c <_free_r>
 8007fb4:	e7e1      	b.n	8007f7a <_realloc_r+0x1e>
 8007fb6:	4635      	mov	r5, r6
 8007fb8:	e7df      	b.n	8007f7a <_realloc_r+0x1e>
	...

08007fbc <_sbrk_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_sbrk_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f7f9 fa3a 	bl	8001440 <_sbrk>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_sbrk_r+0x1a>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_sbrk_r+0x1a>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000490 	.word	0x20000490

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f000 b811 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000494 	.word	0x20000494

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f000 b80c 	b.w	8008006 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000494 	.word	0x20000494

08007ff4 <_malloc_usable_size_r>:
 8007ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff8:	1f18      	subs	r0, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bfbc      	itt	lt
 8007ffe:	580b      	ldrlt	r3, [r1, r0]
 8008000:	18c0      	addlt	r0, r0, r3
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_acquire_recursive>:
 8008004:	4770      	bx	lr

08008006 <__retarget_lock_release_recursive>:
 8008006:	4770      	bx	lr

08008008 <_init>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr

08008014 <_fini>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr
